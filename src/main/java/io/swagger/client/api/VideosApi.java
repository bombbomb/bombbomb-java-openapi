/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.25797
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.VideoEncodingStatusResponse;
import io.swagger.client.model.VideoRecorderMethodResponse;
import io.swagger.client.model.VideoPublicRepresentation;
import io.swagger.client.model.SignUploadRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideosApi {
    private ApiClient apiClient;

    public VideosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideosApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getVideoEncodingStatus */
    private com.squareup.okhttp.Call getVideoEncodingStatusCall(String videoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getVideoEncodingStatus(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/videos/{videoId}/status".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "videoId" + "\\}", apiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Video Encoding Status
     * Get information about the current state of encoding for a given video id.
     * @param videoId The video&#39;s id. (required)
     * @return VideoEncodingStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VideoEncodingStatusResponse getVideoEncodingStatus(String videoId) throws ApiException {
        ApiResponse<VideoEncodingStatusResponse> resp = getVideoEncodingStatusWithHttpInfo(videoId);
        return resp.getData();
    }

    /**
     * Video Encoding Status
     * Get information about the current state of encoding for a given video id.
     * @param videoId The video&#39;s id. (required)
     * @return ApiResponse&lt;VideoEncodingStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VideoEncodingStatusResponse> getVideoEncodingStatusWithHttpInfo(String videoId) throws ApiException {
        com.squareup.okhttp.Call call = getVideoEncodingStatusCall(videoId, null, null);
        Type localVarReturnType = new TypeToken<VideoEncodingStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Video Encoding Status (asynchronously)
     * Get information about the current state of encoding for a given video id.
     * @param videoId The video&#39;s id. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVideoEncodingStatusAsync(String videoId, final ApiCallback<VideoEncodingStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVideoEncodingStatusCall(videoId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VideoEncodingStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getVideoRecorder */
    private com.squareup.okhttp.Call getVideoRecorderCall(Integer width, String videoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/videos/live/getRecorder".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "width", width));
        if (videoId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "videoId", videoId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get Live Video Recorder HTML
     * Returns an object with a number of properties to help you put a video recorder on your site.         This is to be used in conjunction with the VideoRecordedLive call one the user has confirmed in your UI that         the video is how they want it.
     * @param width The width of the recorder to present. (optional)
     * @param videoId The id of the video to record (optional)
     * @return VideoRecorderMethodResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VideoRecorderMethodResponse getVideoRecorder(Integer width, String videoId) throws ApiException {
        ApiResponse<VideoRecorderMethodResponse> resp = getVideoRecorderWithHttpInfo(width, videoId);
        return resp.getData();
    }

    /**
     * Get Live Video Recorder HTML
     * Returns an object with a number of properties to help you put a video recorder on your site.         This is to be used in conjunction with the VideoRecordedLive call one the user has confirmed in your UI that         the video is how they want it.
     * @param width The width of the recorder to present. (optional)
     * @param videoId The id of the video to record (optional)
     * @return ApiResponse&lt;VideoRecorderMethodResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VideoRecorderMethodResponse> getVideoRecorderWithHttpInfo(Integer width, String videoId) throws ApiException {
        com.squareup.okhttp.Call call = getVideoRecorderCall(width, videoId, null, null);
        Type localVarReturnType = new TypeToken<VideoRecorderMethodResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Live Video Recorder HTML (asynchronously)
     * Returns an object with a number of properties to help you put a video recorder on your site.         This is to be used in conjunction with the VideoRecordedLive call one the user has confirmed in your UI that         the video is how they want it.
     * @param width The width of the recorder to present. (optional)
     * @param videoId The id of the video to record (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVideoRecorderAsync(Integer width, String videoId, final ApiCallback<VideoRecorderMethodResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVideoRecorderCall(width, videoId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VideoRecorderMethodResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for markLiveRecordingComplete */
    private com.squareup.okhttp.Call markLiveRecordingCompleteCall(String videoId, String filename, String title, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling markLiveRecordingComplete(Async)");
        }
        
        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling markLiveRecordingComplete(Async)");
        }
        
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling markLiveRecordingComplete(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/videos/live/markComplete".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (videoId != null)
        localVarFormParams.put("videoId", videoId);
        if (filename != null)
        localVarFormParams.put("filename", filename);
        if (title != null)
        localVarFormParams.put("title", title);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Completes a live recording
     * Used in conjunction with the live recorder method to mark a video recording as complete.
     * @param videoId The id of the video to mark as done. (required)
     * @param filename The filename that was chosen as the final video. (required)
     * @param title The title to give the video (required)
     * @return VideoPublicRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VideoPublicRepresentation markLiveRecordingComplete(String videoId, String filename, String title) throws ApiException {
        ApiResponse<VideoPublicRepresentation> resp = markLiveRecordingCompleteWithHttpInfo(videoId, filename, title);
        return resp.getData();
    }

    /**
     * Completes a live recording
     * Used in conjunction with the live recorder method to mark a video recording as complete.
     * @param videoId The id of the video to mark as done. (required)
     * @param filename The filename that was chosen as the final video. (required)
     * @param title The title to give the video (required)
     * @return ApiResponse&lt;VideoPublicRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VideoPublicRepresentation> markLiveRecordingCompleteWithHttpInfo(String videoId, String filename, String title) throws ApiException {
        com.squareup.okhttp.Call call = markLiveRecordingCompleteCall(videoId, filename, title, null, null);
        Type localVarReturnType = new TypeToken<VideoPublicRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Completes a live recording (asynchronously)
     * Used in conjunction with the live recorder method to mark a video recording as complete.
     * @param videoId The id of the video to mark as done. (required)
     * @param filename The filename that was chosen as the final video. (required)
     * @param title The title to give the video (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call markLiveRecordingCompleteAsync(String videoId, String filename, String title, final ApiCallback<VideoPublicRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = markLiveRecordingCompleteCall(videoId, filename, title, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VideoPublicRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for signUpload */
    private com.squareup.okhttp.Call signUploadCall(SignUploadRequest policy, Boolean v4, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = policy;
        
        // verify the required parameter 'policy' is set
        if (policy == null) {
            throw new ApiException("Missing the required parameter 'policy' when calling signUpload(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/video/signedUpload".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (v4 != null)
        localVarFormParams.put("v4", v4);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Generate Signed Url
     * Generates a signed url to be used for video uploads.
     * @param policy The policy to sign (required)
     * @param v4 Whether to do v4 signing (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String signUpload(SignUploadRequest policy, Boolean v4) throws ApiException {
        ApiResponse<String> resp = signUploadWithHttpInfo(policy, v4);
        return resp.getData();
    }

    /**
     * Generate Signed Url
     * Generates a signed url to be used for video uploads.
     * @param policy The policy to sign (required)
     * @param v4 Whether to do v4 signing (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> signUploadWithHttpInfo(SignUploadRequest policy, Boolean v4) throws ApiException {
        com.squareup.okhttp.Call call = signUploadCall(policy, v4, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generate Signed Url (asynchronously)
     * Generates a signed url to be used for video uploads.
     * @param policy The policy to sign (required)
     * @param v4 Whether to do v4 signing (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signUploadAsync(SignUploadRequest policy, Boolean v4, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signUploadCall(policy, v4, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateVideoThumbnailV2 */
    private com.squareup.okhttp.Call updateVideoThumbnailV2Call(String videoId, String thumbnail, Boolean custom, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling updateVideoThumbnailV2(Async)");
        }
        
        // verify the required parameter 'thumbnail' is set
        if (thumbnail == null) {
            throw new ApiException("Missing the required parameter 'thumbnail' when calling updateVideoThumbnailV2(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/videos/thumbnail".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (videoId != null)
        localVarFormParams.put("videoId", videoId);
        if (custom != null)
        localVarFormParams.put("custom", custom);
        if (thumbnail != null)
        localVarFormParams.put("thumbnail", thumbnail);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Upload thumbnail
     * Upload a new video thumbnail
     * @param videoId The id of the video (required)
     * @param thumbnail The thumbnail being uploaded (required)
     * @param custom The default email to use. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateVideoThumbnailV2(String videoId, String thumbnail, Boolean custom) throws ApiException {
        updateVideoThumbnailV2WithHttpInfo(videoId, thumbnail, custom);
    }

    /**
     * Upload thumbnail
     * Upload a new video thumbnail
     * @param videoId The id of the video (required)
     * @param thumbnail The thumbnail being uploaded (required)
     * @param custom The default email to use. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateVideoThumbnailV2WithHttpInfo(String videoId, String thumbnail, Boolean custom) throws ApiException {
        com.squareup.okhttp.Call call = updateVideoThumbnailV2Call(videoId, thumbnail, custom, null, null);
        return apiClient.execute(call);
    }

    /**
     * Upload thumbnail (asynchronously)
     * Upload a new video thumbnail
     * @param videoId The id of the video (required)
     * @param thumbnail The thumbnail being uploaded (required)
     * @param custom The default email to use. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateVideoThumbnailV2Async(String videoId, String thumbnail, Boolean custom, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateVideoThumbnailV2Call(videoId, thumbnail, custom, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
