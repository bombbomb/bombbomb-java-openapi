/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.25797
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.PromptBot;
import io.swagger.client.model.VideoEmailPrompt;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PromptsApi {
    private ApiClient apiClient;

    public PromptsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PromptsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createPromptBot */
    private com.squareup.okhttp.Call createPromptBotCall(String emailId, String name, String subject, String content, String contactFieldValueColumn, String botTypeId, String templateId, String listId, String videoId, String endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling createPromptBot(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createPromptBot(Async)");
        }
        
        // verify the required parameter 'subject' is set
        if (subject == null) {
            throw new ApiException("Missing the required parameter 'subject' when calling createPromptBot(Async)");
        }
        
        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling createPromptBot(Async)");
        }
        
        // verify the required parameter 'contactFieldValueColumn' is set
        if (contactFieldValueColumn == null) {
            throw new ApiException("Missing the required parameter 'contactFieldValueColumn' when calling createPromptBot(Async)");
        }
        
        // verify the required parameter 'botTypeId' is set
        if (botTypeId == null) {
            throw new ApiException("Missing the required parameter 'botTypeId' when calling createPromptBot(Async)");
        }
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling createPromptBot(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/prompts/bots".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (listId != null)
        localVarFormParams.put("listId", listId);
        if (emailId != null)
        localVarFormParams.put("emailId", emailId);
        if (videoId != null)
        localVarFormParams.put("videoId", videoId);
        if (name != null)
        localVarFormParams.put("name", name);
        if (subject != null)
        localVarFormParams.put("subject", subject);
        if (content != null)
        localVarFormParams.put("content", content);
        if (contactFieldValueColumn != null)
        localVarFormParams.put("contactFieldValueColumn", contactFieldValueColumn);
        if (endDate != null)
        localVarFormParams.put("endDate", endDate);
        if (botTypeId != null)
        localVarFormParams.put("botTypeId", botTypeId);
        if (templateId != null)
        localVarFormParams.put("templateId", templateId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a running Prompt Bot for a list
     * Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.
     * @param emailId The default email to use. (required)
     * @param name The name of the bot. (required)
     * @param subject The subject of the default email. (required)
     * @param content The content used in the email. (required)
     * @param contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param botTypeId The type of bot to create. (required)
     * @param templateId The template used to create the email id. (required)
     * @param listId The list id to attach the bot to. (optional)
     * @param videoId The video used in the email. (optional)
     * @param endDate The time frame to complete sending to the list. (optional)
     * @return PromptBot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PromptBot createPromptBot(String emailId, String name, String subject, String content, String contactFieldValueColumn, String botTypeId, String templateId, String listId, String videoId, String endDate) throws ApiException {
        ApiResponse<PromptBot> resp = createPromptBotWithHttpInfo(emailId, name, subject, content, contactFieldValueColumn, botTypeId, templateId, listId, videoId, endDate);
        return resp.getData();
    }

    /**
     * Create a running Prompt Bot for a list
     * Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.
     * @param emailId The default email to use. (required)
     * @param name The name of the bot. (required)
     * @param subject The subject of the default email. (required)
     * @param content The content used in the email. (required)
     * @param contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param botTypeId The type of bot to create. (required)
     * @param templateId The template used to create the email id. (required)
     * @param listId The list id to attach the bot to. (optional)
     * @param videoId The video used in the email. (optional)
     * @param endDate The time frame to complete sending to the list. (optional)
     * @return ApiResponse&lt;PromptBot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PromptBot> createPromptBotWithHttpInfo(String emailId, String name, String subject, String content, String contactFieldValueColumn, String botTypeId, String templateId, String listId, String videoId, String endDate) throws ApiException {
        com.squareup.okhttp.Call call = createPromptBotCall(emailId, name, subject, content, contactFieldValueColumn, botTypeId, templateId, listId, videoId, endDate, null, null);
        Type localVarReturnType = new TypeToken<PromptBot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a running Prompt Bot for a list (asynchronously)
     * Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.
     * @param emailId The default email to use. (required)
     * @param name The name of the bot. (required)
     * @param subject The subject of the default email. (required)
     * @param content The content used in the email. (required)
     * @param contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param botTypeId The type of bot to create. (required)
     * @param templateId The template used to create the email id. (required)
     * @param listId The list id to attach the bot to. (optional)
     * @param videoId The video used in the email. (optional)
     * @param endDate The time frame to complete sending to the list. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPromptBotAsync(String emailId, String name, String subject, String content, String contactFieldValueColumn, String botTypeId, String templateId, String listId, String videoId, String endDate, final ApiCallback<PromptBot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPromptBotCall(emailId, name, subject, content, contactFieldValueColumn, botTypeId, templateId, listId, videoId, endDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PromptBot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createVideoEmailPrompt */
    private com.squareup.okhttp.Call createVideoEmailPromptCall(VideoEmailPrompt prompt, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = prompt;
        
        // verify the required parameter 'prompt' is set
        if (prompt == null) {
            throw new ApiException("Missing the required parameter 'prompt' when calling createVideoEmailPrompt(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/prompt".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Prompts user to send a video
     * Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.
     * @param prompt The Video Email Prompt to be created (required)
     * @return VideoEmailPrompt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VideoEmailPrompt createVideoEmailPrompt(VideoEmailPrompt prompt) throws ApiException {
        ApiResponse<VideoEmailPrompt> resp = createVideoEmailPromptWithHttpInfo(prompt);
        return resp.getData();
    }

    /**
     * Prompts user to send a video
     * Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.
     * @param prompt The Video Email Prompt to be created (required)
     * @return ApiResponse&lt;VideoEmailPrompt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VideoEmailPrompt> createVideoEmailPromptWithHttpInfo(VideoEmailPrompt prompt) throws ApiException {
        com.squareup.okhttp.Call call = createVideoEmailPromptCall(prompt, null, null);
        Type localVarReturnType = new TypeToken<VideoEmailPrompt>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Prompts user to send a video (asynchronously)
     * Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.
     * @param prompt The Video Email Prompt to be created (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createVideoEmailPromptAsync(VideoEmailPrompt prompt, final ApiCallback<VideoEmailPrompt> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createVideoEmailPromptCall(prompt, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VideoEmailPrompt>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPendingVideoEmailPrompts */
    private com.squareup.okhttp.Call getPendingVideoEmailPromptsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/prompt/pending".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List pending prompts
     * Returns a list of prompts that have not been sent yet, and can still be customized.
     * @return List&lt;VideoEmailPrompt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<VideoEmailPrompt> getPendingVideoEmailPrompts() throws ApiException {
        ApiResponse<List<VideoEmailPrompt>> resp = getPendingVideoEmailPromptsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List pending prompts
     * Returns a list of prompts that have not been sent yet, and can still be customized.
     * @return ApiResponse&lt;List&lt;VideoEmailPrompt&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<VideoEmailPrompt>> getPendingVideoEmailPromptsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPendingVideoEmailPromptsCall(null, null);
        Type localVarReturnType = new TypeToken<List<VideoEmailPrompt>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List pending prompts (asynchronously)
     * Returns a list of prompts that have not been sent yet, and can still be customized.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPendingVideoEmailPromptsAsync(final ApiCallback<List<VideoEmailPrompt>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPendingVideoEmailPromptsCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<VideoEmailPrompt>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPromptBots */
    private com.squareup.okhttp.Call getPromptBotsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/prompts/bots".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List Prompt Bots
     * Returns a list of all Prompt Bots for the user.
     * @return List&lt;PromptBot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PromptBot> getPromptBots() throws ApiException {
        ApiResponse<List<PromptBot>> resp = getPromptBotsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List Prompt Bots
     * Returns a list of all Prompt Bots for the user.
     * @return ApiResponse&lt;List&lt;PromptBot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PromptBot>> getPromptBotsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPromptBotsCall(null, null);
        Type localVarReturnType = new TypeToken<List<PromptBot>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Prompt Bots (asynchronously)
     * Returns a list of all Prompt Bots for the user.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPromptBotsAsync(final ApiCallback<List<PromptBot>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPromptBotsCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PromptBot>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPromptCampaigns */
    private com.squareup.okhttp.Call getPromptCampaignsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/prompts/campaigns".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List Prompt Campaigns
     * Returns a list of all Prompt Campaigns for the user.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getPromptCampaigns() throws ApiException {
        getPromptCampaignsWithHttpInfo();
    }

    /**
     * List Prompt Campaigns
     * Returns a list of all Prompt Campaigns for the user.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getPromptCampaignsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPromptCampaignsCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * List Prompt Campaigns (asynchronously)
     * Returns a list of all Prompt Campaigns for the user.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPromptCampaignsAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPromptCampaignsCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getVideoEmailPrompt */
    private com.squareup.okhttp.Call getVideoEmailPromptCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVideoEmailPrompt(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/prompt/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets a prompt
     * Gets a prompt
     * @param id The Id of the prompt (required)
     * @return VideoEmailPrompt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VideoEmailPrompt getVideoEmailPrompt(String id) throws ApiException {
        ApiResponse<VideoEmailPrompt> resp = getVideoEmailPromptWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets a prompt
     * Gets a prompt
     * @param id The Id of the prompt (required)
     * @return ApiResponse&lt;VideoEmailPrompt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VideoEmailPrompt> getVideoEmailPromptWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getVideoEmailPromptCall(id, null, null);
        Type localVarReturnType = new TypeToken<VideoEmailPrompt>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a prompt (asynchronously)
     * Gets a prompt
     * @param id The Id of the prompt (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVideoEmailPromptAsync(String id, final ApiCallback<VideoEmailPrompt> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVideoEmailPromptCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VideoEmailPrompt>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getVideoEmailPrompts */
    private com.squareup.okhttp.Call getVideoEmailPromptsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/prompt/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List prompts
     * Returns a list of all prompts.
     * @return List&lt;VideoEmailPrompt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<VideoEmailPrompt> getVideoEmailPrompts() throws ApiException {
        ApiResponse<List<VideoEmailPrompt>> resp = getVideoEmailPromptsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List prompts
     * Returns a list of all prompts.
     * @return ApiResponse&lt;List&lt;VideoEmailPrompt&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<VideoEmailPrompt>> getVideoEmailPromptsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getVideoEmailPromptsCall(null, null);
        Type localVarReturnType = new TypeToken<List<VideoEmailPrompt>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List prompts (asynchronously)
     * Returns a list of all prompts.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVideoEmailPromptsAsync(final ApiCallback<List<VideoEmailPrompt>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVideoEmailPromptsCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<VideoEmailPrompt>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for respondToVideoEmailPrompt */
    private com.squareup.okhttp.Call respondToVideoEmailPromptCall(String id, String choice, String videoId, String emailId, String subject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling respondToVideoEmailPrompt(Async)");
        }
        
        // verify the required parameter 'choice' is set
        if (choice == null) {
            throw new ApiException("Missing the required parameter 'choice' when calling respondToVideoEmailPrompt(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/prompt/{id}/response".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (videoId != null)
        localVarFormParams.put("videoId", videoId);
        if (emailId != null)
        localVarFormParams.put("emailId", emailId);
        if (subject != null)
        localVarFormParams.put("subject", subject);
        if (choice != null)
        localVarFormParams.put("choice", choice);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Respond to a prompt
     * Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.
     * @param id The id of the prompt. (required)
     * @param choice The users&#39; selection. Can be: WithVideo, WithEmail, Cancel, Restore, Reset, Manual (required)
     * @param videoId The id of the video. (optional)
     * @param emailId The id of the email. (optional)
     * @param subject The subject of the email (optional)
     * @return VideoEmailPrompt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VideoEmailPrompt respondToVideoEmailPrompt(String id, String choice, String videoId, String emailId, String subject) throws ApiException {
        ApiResponse<VideoEmailPrompt> resp = respondToVideoEmailPromptWithHttpInfo(id, choice, videoId, emailId, subject);
        return resp.getData();
    }

    /**
     * Respond to a prompt
     * Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.
     * @param id The id of the prompt. (required)
     * @param choice The users&#39; selection. Can be: WithVideo, WithEmail, Cancel, Restore, Reset, Manual (required)
     * @param videoId The id of the video. (optional)
     * @param emailId The id of the email. (optional)
     * @param subject The subject of the email (optional)
     * @return ApiResponse&lt;VideoEmailPrompt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VideoEmailPrompt> respondToVideoEmailPromptWithHttpInfo(String id, String choice, String videoId, String emailId, String subject) throws ApiException {
        com.squareup.okhttp.Call call = respondToVideoEmailPromptCall(id, choice, videoId, emailId, subject, null, null);
        Type localVarReturnType = new TypeToken<VideoEmailPrompt>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Respond to a prompt (asynchronously)
     * Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.
     * @param id The id of the prompt. (required)
     * @param choice The users&#39; selection. Can be: WithVideo, WithEmail, Cancel, Restore, Reset, Manual (required)
     * @param videoId The id of the video. (optional)
     * @param emailId The id of the email. (optional)
     * @param subject The subject of the email (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call respondToVideoEmailPromptAsync(String id, String choice, String videoId, String emailId, String subject, final ApiCallback<VideoEmailPrompt> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = respondToVideoEmailPromptCall(id, choice, videoId, emailId, subject, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VideoEmailPrompt>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updatePrompt */
    private com.squareup.okhttp.Call updatePromptCall(String id, String sendMechanism, String facebookMessage, String twitterMessage, String videoId, String emailId, String subject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePrompt(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/prompts/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (sendMechanism != null)
        localVarFormParams.put("sendMechanism", sendMechanism);
        if (facebookMessage != null)
        localVarFormParams.put("facebookMessage", facebookMessage);
        if (twitterMessage != null)
        localVarFormParams.put("twitterMessage", twitterMessage);
        if (videoId != null)
        localVarFormParams.put("videoId", videoId);
        if (emailId != null)
        localVarFormParams.put("emailId", emailId);
        if (subject != null)
        localVarFormParams.put("subject", subject);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update Prompt
     * Updates a Prompt
     * @param id The prompt&#39;s id (required)
     * @param sendMechanism The mechanism for the prompt to be sent (optional)
     * @param facebookMessage The facebook message assigned to the prompt (optional)
     * @param twitterMessage The twitter message assigned to the prompt (optional)
     * @param videoId The id of the video. (optional)
     * @param emailId The id of the email. (optional)
     * @param subject The subject of the email (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePrompt(String id, String sendMechanism, String facebookMessage, String twitterMessage, String videoId, String emailId, String subject) throws ApiException {
        updatePromptWithHttpInfo(id, sendMechanism, facebookMessage, twitterMessage, videoId, emailId, subject);
    }

    /**
     * Update Prompt
     * Updates a Prompt
     * @param id The prompt&#39;s id (required)
     * @param sendMechanism The mechanism for the prompt to be sent (optional)
     * @param facebookMessage The facebook message assigned to the prompt (optional)
     * @param twitterMessage The twitter message assigned to the prompt (optional)
     * @param videoId The id of the video. (optional)
     * @param emailId The id of the email. (optional)
     * @param subject The subject of the email (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePromptWithHttpInfo(String id, String sendMechanism, String facebookMessage, String twitterMessage, String videoId, String emailId, String subject) throws ApiException {
        com.squareup.okhttp.Call call = updatePromptCall(id, sendMechanism, facebookMessage, twitterMessage, videoId, emailId, subject, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update Prompt (asynchronously)
     * Updates a Prompt
     * @param id The prompt&#39;s id (required)
     * @param sendMechanism The mechanism for the prompt to be sent (optional)
     * @param facebookMessage The facebook message assigned to the prompt (optional)
     * @param twitterMessage The twitter message assigned to the prompt (optional)
     * @param videoId The id of the video. (optional)
     * @param emailId The id of the email. (optional)
     * @param subject The subject of the email (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePromptAsync(String id, String sendMechanism, String facebookMessage, String twitterMessage, String videoId, String emailId, String subject, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePromptCall(id, sendMechanism, facebookMessage, twitterMessage, videoId, emailId, subject, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updatePromptBot */
    private com.squareup.okhttp.Call updatePromptBotCall(String id, String emailId, String name, String subject, String content, String contactFieldValueColumn, String templateId, String listId, String videoId, String endDate, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePromptBot(Async)");
        }
        
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling updatePromptBot(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updatePromptBot(Async)");
        }
        
        // verify the required parameter 'subject' is set
        if (subject == null) {
            throw new ApiException("Missing the required parameter 'subject' when calling updatePromptBot(Async)");
        }
        
        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling updatePromptBot(Async)");
        }
        
        // verify the required parameter 'contactFieldValueColumn' is set
        if (contactFieldValueColumn == null) {
            throw new ApiException("Missing the required parameter 'contactFieldValueColumn' when calling updatePromptBot(Async)");
        }
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling updatePromptBot(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/prompts/bots/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (listId != null)
        localVarFormParams.put("listId", listId);
        if (emailId != null)
        localVarFormParams.put("emailId", emailId);
        if (videoId != null)
        localVarFormParams.put("videoId", videoId);
        if (endDate != null)
        localVarFormParams.put("endDate", endDate);
        if (status != null)
        localVarFormParams.put("status", status);
        if (name != null)
        localVarFormParams.put("name", name);
        if (subject != null)
        localVarFormParams.put("subject", subject);
        if (content != null)
        localVarFormParams.put("content", content);
        if (contactFieldValueColumn != null)
        localVarFormParams.put("contactFieldValueColumn", contactFieldValueColumn);
        if (templateId != null)
        localVarFormParams.put("templateId", templateId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update Prompt Bot
     * Updates a Prompt Bot&#39;s settings.
     * @param id The bot id. (required)
     * @param emailId The default email to use. (required)
     * @param name The name of the bot. (required)
     * @param subject The subject of the default email. (required)
     * @param content The content used in the default email. (required)
     * @param contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param templateId The template used to create the email id. (required)
     * @param listId The list id to attach the bot to. (optional)
     * @param videoId The video used in the default email. (optional)
     * @param endDate The time frame to complete sending to the list. (optional)
     * @param status The status of the bot. (optional)
     * @return PromptBot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PromptBot updatePromptBot(String id, String emailId, String name, String subject, String content, String contactFieldValueColumn, String templateId, String listId, String videoId, String endDate, String status) throws ApiException {
        ApiResponse<PromptBot> resp = updatePromptBotWithHttpInfo(id, emailId, name, subject, content, contactFieldValueColumn, templateId, listId, videoId, endDate, status);
        return resp.getData();
    }

    /**
     * Update Prompt Bot
     * Updates a Prompt Bot&#39;s settings.
     * @param id The bot id. (required)
     * @param emailId The default email to use. (required)
     * @param name The name of the bot. (required)
     * @param subject The subject of the default email. (required)
     * @param content The content used in the default email. (required)
     * @param contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param templateId The template used to create the email id. (required)
     * @param listId The list id to attach the bot to. (optional)
     * @param videoId The video used in the default email. (optional)
     * @param endDate The time frame to complete sending to the list. (optional)
     * @param status The status of the bot. (optional)
     * @return ApiResponse&lt;PromptBot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PromptBot> updatePromptBotWithHttpInfo(String id, String emailId, String name, String subject, String content, String contactFieldValueColumn, String templateId, String listId, String videoId, String endDate, String status) throws ApiException {
        com.squareup.okhttp.Call call = updatePromptBotCall(id, emailId, name, subject, content, contactFieldValueColumn, templateId, listId, videoId, endDate, status, null, null);
        Type localVarReturnType = new TypeToken<PromptBot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Prompt Bot (asynchronously)
     * Updates a Prompt Bot&#39;s settings.
     * @param id The bot id. (required)
     * @param emailId The default email to use. (required)
     * @param name The name of the bot. (required)
     * @param subject The subject of the default email. (required)
     * @param content The content used in the default email. (required)
     * @param contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param templateId The template used to create the email id. (required)
     * @param listId The list id to attach the bot to. (optional)
     * @param videoId The video used in the default email. (optional)
     * @param endDate The time frame to complete sending to the list. (optional)
     * @param status The status of the bot. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePromptBotAsync(String id, String emailId, String name, String subject, String content, String contactFieldValueColumn, String templateId, String listId, String videoId, String endDate, String status, final ApiCallback<PromptBot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePromptBotCall(id, emailId, name, subject, content, contactFieldValueColumn, templateId, listId, videoId, endDate, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PromptBot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updatePromptCampaign */
    private com.squareup.okhttp.Call updatePromptCampaignCall(String clientGroupId, String brandedTemplateId, String personalTemplateId, Boolean enabled, String sendMechanism, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'clientGroupId' is set
        if (clientGroupId == null) {
            throw new ApiException("Missing the required parameter 'clientGroupId' when calling updatePromptCampaign(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/prompts/campaigns/{id}".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (clientGroupId != null)
        localVarFormParams.put("clientGroupId", clientGroupId);
        if (brandedTemplateId != null)
        localVarFormParams.put("brandedTemplateId", brandedTemplateId);
        if (personalTemplateId != null)
        localVarFormParams.put("personalTemplateId", personalTemplateId);
        if (enabled != null)
        localVarFormParams.put("enabled", enabled);
        if (sendMechanism != null)
        localVarFormParams.put("sendMechanism", sendMechanism);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update Prompt Campaign
     * Updates a Prompt Campaign&#39;s Settings
     * @param clientGroupId The client group of the campaign. (required)
     * @param brandedTemplateId The template to use for branded feel emails. (optional)
     * @param personalTemplateId The template to use for personal feel emails. (optional)
     * @param enabled Set whether the user is able to start receiving prompts. (optional)
     * @param sendMechanism The way to send the prompt (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePromptCampaign(String clientGroupId, String brandedTemplateId, String personalTemplateId, Boolean enabled, String sendMechanism) throws ApiException {
        updatePromptCampaignWithHttpInfo(clientGroupId, brandedTemplateId, personalTemplateId, enabled, sendMechanism);
    }

    /**
     * Update Prompt Campaign
     * Updates a Prompt Campaign&#39;s Settings
     * @param clientGroupId The client group of the campaign. (required)
     * @param brandedTemplateId The template to use for branded feel emails. (optional)
     * @param personalTemplateId The template to use for personal feel emails. (optional)
     * @param enabled Set whether the user is able to start receiving prompts. (optional)
     * @param sendMechanism The way to send the prompt (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePromptCampaignWithHttpInfo(String clientGroupId, String brandedTemplateId, String personalTemplateId, Boolean enabled, String sendMechanism) throws ApiException {
        com.squareup.okhttp.Call call = updatePromptCampaignCall(clientGroupId, brandedTemplateId, personalTemplateId, enabled, sendMechanism, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update Prompt Campaign (asynchronously)
     * Updates a Prompt Campaign&#39;s Settings
     * @param clientGroupId The client group of the campaign. (required)
     * @param brandedTemplateId The template to use for branded feel emails. (optional)
     * @param personalTemplateId The template to use for personal feel emails. (optional)
     * @param enabled Set whether the user is able to start receiving prompts. (optional)
     * @param sendMechanism The way to send the prompt (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePromptCampaignAsync(String clientGroupId, String brandedTemplateId, String personalTemplateId, Boolean enabled, String sendMechanism, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePromptCampaignCall(clientGroupId, brandedTemplateId, personalTemplateId, enabled, sendMechanism, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
