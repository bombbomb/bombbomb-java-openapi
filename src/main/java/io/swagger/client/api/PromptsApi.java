/*
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.PromptBot;
import io.swagger.client.model.VideoEmailPrompt;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PromptsApi {
    private ApiClient apiClient;

    public PromptsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PromptsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createPromptBot
     * @param emailId The default email to use. (required)
     * @param name The name of the bot. (required)
     * @param subject The subject of the default email. (required)
     * @param content The content used in the email. (required)
     * @param contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param botTypeId The type of bot to create. (required)
     * @param templateId The template used to create the email id. (required)
     * @param listId The list id to attach the bot to. (optional)
     * @param videoId The video used in the email. (optional)
     * @param endDate The time frame to complete sending to the list. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPromptBotCall(String emailId, String name, String subject, String content, String contactFieldValueColumn, String botTypeId, String templateId, String listId, String videoId, String endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prompts/bots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (listId != null)
        localVarFormParams.put("listId", listId);
        if (emailId != null)
        localVarFormParams.put("emailId", emailId);
        if (videoId != null)
        localVarFormParams.put("videoId", videoId);
        if (name != null)
        localVarFormParams.put("name", name);
        if (subject != null)
        localVarFormParams.put("subject", subject);
        if (content != null)
        localVarFormParams.put("content", content);
        if (contactFieldValueColumn != null)
        localVarFormParams.put("contactFieldValueColumn", contactFieldValueColumn);
        if (endDate != null)
        localVarFormParams.put("endDate", endDate);
        if (botTypeId != null)
        localVarFormParams.put("botTypeId", botTypeId);
        if (templateId != null)
        localVarFormParams.put("templateId", templateId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPromptBotValidateBeforeCall(String emailId, String name, String subject, String content, String contactFieldValueColumn, String botTypeId, String templateId, String listId, String videoId, String endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling createPromptBot(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createPromptBot(Async)");
        }
        
        // verify the required parameter 'subject' is set
        if (subject == null) {
            throw new ApiException("Missing the required parameter 'subject' when calling createPromptBot(Async)");
        }
        
        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling createPromptBot(Async)");
        }
        
        // verify the required parameter 'contactFieldValueColumn' is set
        if (contactFieldValueColumn == null) {
            throw new ApiException("Missing the required parameter 'contactFieldValueColumn' when calling createPromptBot(Async)");
        }
        
        // verify the required parameter 'botTypeId' is set
        if (botTypeId == null) {
            throw new ApiException("Missing the required parameter 'botTypeId' when calling createPromptBot(Async)");
        }
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling createPromptBot(Async)");
        }
        

        com.squareup.okhttp.Call call = createPromptBotCall(emailId, name, subject, content, contactFieldValueColumn, botTypeId, templateId, listId, videoId, endDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a running Prompt Bot for a list
     * Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.
     * @param emailId The default email to use. (required)
     * @param name The name of the bot. (required)
     * @param subject The subject of the default email. (required)
     * @param content The content used in the email. (required)
     * @param contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param botTypeId The type of bot to create. (required)
     * @param templateId The template used to create the email id. (required)
     * @param listId The list id to attach the bot to. (optional)
     * @param videoId The video used in the email. (optional)
     * @param endDate The time frame to complete sending to the list. (optional)
     * @return PromptBot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PromptBot createPromptBot(String emailId, String name, String subject, String content, String contactFieldValueColumn, String botTypeId, String templateId, String listId, String videoId, String endDate) throws ApiException {
        ApiResponse<PromptBot> resp = createPromptBotWithHttpInfo(emailId, name, subject, content, contactFieldValueColumn, botTypeId, templateId, listId, videoId, endDate);
        return resp.getData();
    }

    /**
     * Create a running Prompt Bot for a list
     * Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.
     * @param emailId The default email to use. (required)
     * @param name The name of the bot. (required)
     * @param subject The subject of the default email. (required)
     * @param content The content used in the email. (required)
     * @param contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param botTypeId The type of bot to create. (required)
     * @param templateId The template used to create the email id. (required)
     * @param listId The list id to attach the bot to. (optional)
     * @param videoId The video used in the email. (optional)
     * @param endDate The time frame to complete sending to the list. (optional)
     * @return ApiResponse&lt;PromptBot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PromptBot> createPromptBotWithHttpInfo(String emailId, String name, String subject, String content, String contactFieldValueColumn, String botTypeId, String templateId, String listId, String videoId, String endDate) throws ApiException {
        com.squareup.okhttp.Call call = createPromptBotValidateBeforeCall(emailId, name, subject, content, contactFieldValueColumn, botTypeId, templateId, listId, videoId, endDate, null, null);
        Type localVarReturnType = new TypeToken<PromptBot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a running Prompt Bot for a list (asynchronously)
     * Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.
     * @param emailId The default email to use. (required)
     * @param name The name of the bot. (required)
     * @param subject The subject of the default email. (required)
     * @param content The content used in the email. (required)
     * @param contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param botTypeId The type of bot to create. (required)
     * @param templateId The template used to create the email id. (required)
     * @param listId The list id to attach the bot to. (optional)
     * @param videoId The video used in the email. (optional)
     * @param endDate The time frame to complete sending to the list. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPromptBotAsync(String emailId, String name, String subject, String content, String contactFieldValueColumn, String botTypeId, String templateId, String listId, String videoId, String endDate, final ApiCallback<PromptBot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPromptBotValidateBeforeCall(emailId, name, subject, content, contactFieldValueColumn, botTypeId, templateId, listId, videoId, endDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PromptBot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createVideoEmailPrompt
     * @param prompt The Video Email Prompt to be created (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createVideoEmailPromptCall(VideoEmailPrompt prompt, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = prompt;

        // create path and map variables
        String localVarPath = "/prompt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createVideoEmailPromptValidateBeforeCall(VideoEmailPrompt prompt, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'prompt' is set
        if (prompt == null) {
            throw new ApiException("Missing the required parameter 'prompt' when calling createVideoEmailPrompt(Async)");
        }
        

        com.squareup.okhttp.Call call = createVideoEmailPromptCall(prompt, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Prompts user to send a video
     * Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.
     * @param prompt The Video Email Prompt to be created (required)
     * @return VideoEmailPrompt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VideoEmailPrompt createVideoEmailPrompt(VideoEmailPrompt prompt) throws ApiException {
        ApiResponse<VideoEmailPrompt> resp = createVideoEmailPromptWithHttpInfo(prompt);
        return resp.getData();
    }

    /**
     * Prompts user to send a video
     * Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.
     * @param prompt The Video Email Prompt to be created (required)
     * @return ApiResponse&lt;VideoEmailPrompt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VideoEmailPrompt> createVideoEmailPromptWithHttpInfo(VideoEmailPrompt prompt) throws ApiException {
        com.squareup.okhttp.Call call = createVideoEmailPromptValidateBeforeCall(prompt, null, null);
        Type localVarReturnType = new TypeToken<VideoEmailPrompt>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Prompts user to send a video (asynchronously)
     * Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.
     * @param prompt The Video Email Prompt to be created (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createVideoEmailPromptAsync(VideoEmailPrompt prompt, final ApiCallback<VideoEmailPrompt> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createVideoEmailPromptValidateBeforeCall(prompt, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VideoEmailPrompt>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAlternateCampaignContent
     * @param clientGroupId Id for the campaign (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAlternateCampaignContentCall(String clientGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaign/{campaignId}/content/alternate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (clientGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("clientGroupId", clientGroupId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAlternateCampaignContentValidateBeforeCall(String clientGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientGroupId' is set
        if (clientGroupId == null) {
            throw new ApiException("Missing the required parameter 'clientGroupId' when calling getAlternateCampaignContent(Async)");
        }
        

        com.squareup.okhttp.Call call = getAlternateCampaignContentCall(clientGroupId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List alternate campaign content
     * Returns a list of alternate campaign content by campaign id
     * @param clientGroupId Id for the campaign (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getAlternateCampaignContent(String clientGroupId) throws ApiException {
        getAlternateCampaignContentWithHttpInfo(clientGroupId);
    }

    /**
     * List alternate campaign content
     * Returns a list of alternate campaign content by campaign id
     * @param clientGroupId Id for the campaign (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getAlternateCampaignContentWithHttpInfo(String clientGroupId) throws ApiException {
        com.squareup.okhttp.Call call = getAlternateCampaignContentValidateBeforeCall(clientGroupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * List alternate campaign content (asynchronously)
     * Returns a list of alternate campaign content by campaign id
     * @param clientGroupId Id for the campaign (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAlternateCampaignContentAsync(String clientGroupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAlternateCampaignContentValidateBeforeCall(clientGroupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPendingVideoEmailPrompts
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPendingVideoEmailPromptsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prompt/pending";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPendingVideoEmailPromptsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPendingVideoEmailPromptsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List pending prompts
     * Returns a list of prompts that have not been sent yet, and can still be customized.
     * @return List&lt;VideoEmailPrompt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<VideoEmailPrompt> getPendingVideoEmailPrompts() throws ApiException {
        ApiResponse<List<VideoEmailPrompt>> resp = getPendingVideoEmailPromptsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List pending prompts
     * Returns a list of prompts that have not been sent yet, and can still be customized.
     * @return ApiResponse&lt;List&lt;VideoEmailPrompt&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<VideoEmailPrompt>> getPendingVideoEmailPromptsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPendingVideoEmailPromptsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<VideoEmailPrompt>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List pending prompts (asynchronously)
     * Returns a list of prompts that have not been sent yet, and can still be customized.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPendingVideoEmailPromptsAsync(final ApiCallback<List<VideoEmailPrompt>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPendingVideoEmailPromptsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<VideoEmailPrompt>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPromptBots
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPromptBotsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prompts/bots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPromptBotsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPromptBotsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Prompt Bots
     * Returns a list of all Prompt Bots for the user.
     * @return List&lt;PromptBot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PromptBot> getPromptBots() throws ApiException {
        ApiResponse<List<PromptBot>> resp = getPromptBotsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List Prompt Bots
     * Returns a list of all Prompt Bots for the user.
     * @return ApiResponse&lt;List&lt;PromptBot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PromptBot>> getPromptBotsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPromptBotsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<PromptBot>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Prompt Bots (asynchronously)
     * Returns a list of all Prompt Bots for the user.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPromptBotsAsync(final ApiCallback<List<PromptBot>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPromptBotsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PromptBot>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPromptCampaigns
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPromptCampaignsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prompts/{userId}/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPromptCampaignsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPromptCampaignsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Prompt Campaigns
     * Returns a list of all Prompt Campaigns for the user.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getPromptCampaigns() throws ApiException {
        getPromptCampaignsWithHttpInfo();
    }

    /**
     * List Prompt Campaigns
     * Returns a list of all Prompt Campaigns for the user.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getPromptCampaignsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getPromptCampaignsValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * List Prompt Campaigns (asynchronously)
     * Returns a list of all Prompt Campaigns for the user.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPromptCampaignsAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPromptCampaignsValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getVideoEmailPrompt
     * @param id The Id of the prompt (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVideoEmailPromptCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prompt/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVideoEmailPromptValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVideoEmailPrompt(Async)");
        }
        

        com.squareup.okhttp.Call call = getVideoEmailPromptCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a prompt
     * Gets a prompt
     * @param id The Id of the prompt (required)
     * @return VideoEmailPrompt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VideoEmailPrompt getVideoEmailPrompt(String id) throws ApiException {
        ApiResponse<VideoEmailPrompt> resp = getVideoEmailPromptWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets a prompt
     * Gets a prompt
     * @param id The Id of the prompt (required)
     * @return ApiResponse&lt;VideoEmailPrompt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VideoEmailPrompt> getVideoEmailPromptWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getVideoEmailPromptValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<VideoEmailPrompt>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a prompt (asynchronously)
     * Gets a prompt
     * @param id The Id of the prompt (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVideoEmailPromptAsync(String id, final ApiCallback<VideoEmailPrompt> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVideoEmailPromptValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VideoEmailPrompt>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVideoEmailPrompts
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVideoEmailPromptsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prompt/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVideoEmailPromptsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getVideoEmailPromptsCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * List prompts
     * Returns a list of all prompts.
     * @return List&lt;VideoEmailPrompt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<VideoEmailPrompt> getVideoEmailPrompts() throws ApiException {
        ApiResponse<List<VideoEmailPrompt>> resp = getVideoEmailPromptsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List prompts
     * Returns a list of all prompts.
     * @return ApiResponse&lt;List&lt;VideoEmailPrompt&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<VideoEmailPrompt>> getVideoEmailPromptsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getVideoEmailPromptsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<VideoEmailPrompt>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List prompts (asynchronously)
     * Returns a list of all prompts.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVideoEmailPromptsAsync(final ApiCallback<List<VideoEmailPrompt>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVideoEmailPromptsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<VideoEmailPrompt>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for respondToVideoEmailPrompt
     * @param id The id of the prompt. (required)
     * @param choice The users&#39; selection. Can be: WithVideo, WithEmail, Cancel, Restore, Reset, Manual (required)
     * @param videoId The id of the video. (optional)
     * @param emailId The id of the email. (optional)
     * @param subject The subject of the email (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call respondToVideoEmailPromptCall(String id, String choice, String videoId, String emailId, String subject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prompt/{id}/response"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (videoId != null)
        localVarFormParams.put("videoId", videoId);
        if (emailId != null)
        localVarFormParams.put("emailId", emailId);
        if (subject != null)
        localVarFormParams.put("subject", subject);
        if (choice != null)
        localVarFormParams.put("choice", choice);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call respondToVideoEmailPromptValidateBeforeCall(String id, String choice, String videoId, String emailId, String subject, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling respondToVideoEmailPrompt(Async)");
        }
        
        // verify the required parameter 'choice' is set
        if (choice == null) {
            throw new ApiException("Missing the required parameter 'choice' when calling respondToVideoEmailPrompt(Async)");
        }
        

        com.squareup.okhttp.Call call = respondToVideoEmailPromptCall(id, choice, videoId, emailId, subject, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Respond to a prompt
     * Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.
     * @param id The id of the prompt. (required)
     * @param choice The users&#39; selection. Can be: WithVideo, WithEmail, Cancel, Restore, Reset, Manual (required)
     * @param videoId The id of the video. (optional)
     * @param emailId The id of the email. (optional)
     * @param subject The subject of the email (optional)
     * @return VideoEmailPrompt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VideoEmailPrompt respondToVideoEmailPrompt(String id, String choice, String videoId, String emailId, String subject) throws ApiException {
        ApiResponse<VideoEmailPrompt> resp = respondToVideoEmailPromptWithHttpInfo(id, choice, videoId, emailId, subject);
        return resp.getData();
    }

    /**
     * Respond to a prompt
     * Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.
     * @param id The id of the prompt. (required)
     * @param choice The users&#39; selection. Can be: WithVideo, WithEmail, Cancel, Restore, Reset, Manual (required)
     * @param videoId The id of the video. (optional)
     * @param emailId The id of the email. (optional)
     * @param subject The subject of the email (optional)
     * @return ApiResponse&lt;VideoEmailPrompt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VideoEmailPrompt> respondToVideoEmailPromptWithHttpInfo(String id, String choice, String videoId, String emailId, String subject) throws ApiException {
        com.squareup.okhttp.Call call = respondToVideoEmailPromptValidateBeforeCall(id, choice, videoId, emailId, subject, null, null);
        Type localVarReturnType = new TypeToken<VideoEmailPrompt>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Respond to a prompt (asynchronously)
     * Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.
     * @param id The id of the prompt. (required)
     * @param choice The users&#39; selection. Can be: WithVideo, WithEmail, Cancel, Restore, Reset, Manual (required)
     * @param videoId The id of the video. (optional)
     * @param emailId The id of the email. (optional)
     * @param subject The subject of the email (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call respondToVideoEmailPromptAsync(String id, String choice, String videoId, String emailId, String subject, final ApiCallback<VideoEmailPrompt> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = respondToVideoEmailPromptValidateBeforeCall(id, choice, videoId, emailId, subject, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VideoEmailPrompt>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendPromptImmediately
     * @param id The Id of the prompt (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendPromptImmediatelyCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prompt/{id}/sendit"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendPromptImmediatelyValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sendPromptImmediately(Async)");
        }
        

        com.squareup.okhttp.Call call = sendPromptImmediatelyCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Ignore send date and send the prompt now.
     * @param id The Id of the prompt (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void sendPromptImmediately(String id) throws ApiException {
        sendPromptImmediatelyWithHttpInfo(id);
    }

    /**
     * 
     * Ignore send date and send the prompt now.
     * @param id The Id of the prompt (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> sendPromptImmediatelyWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = sendPromptImmediatelyValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Ignore send date and send the prompt now.
     * @param id The Id of the prompt (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendPromptImmediatelyAsync(String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendPromptImmediatelyValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for syncPromptSubscriptions
     * @param migrate After syncing, migrate away from old campaigns. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call syncPromptSubscriptionsCall(Boolean migrate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prompts/campaigns/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (migrate != null)
        localVarFormParams.put("migrate", migrate);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call syncPromptSubscriptionsValidateBeforeCall(Boolean migrate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = syncPromptSubscriptionsCall(migrate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Syncs Campaigns and One to Ones Subscriptions for User
     * Syncs Campaigns and One to Ones Subscriptions for User based on their profile information. The user must be a Prompt Subscriber.
     * @param migrate After syncing, migrate away from old campaigns. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void syncPromptSubscriptions(Boolean migrate) throws ApiException {
        syncPromptSubscriptionsWithHttpInfo(migrate);
    }

    /**
     * Syncs Campaigns and One to Ones Subscriptions for User
     * Syncs Campaigns and One to Ones Subscriptions for User based on their profile information. The user must be a Prompt Subscriber.
     * @param migrate After syncing, migrate away from old campaigns. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> syncPromptSubscriptionsWithHttpInfo(Boolean migrate) throws ApiException {
        com.squareup.okhttp.Call call = syncPromptSubscriptionsValidateBeforeCall(migrate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Syncs Campaigns and One to Ones Subscriptions for User (asynchronously)
     * Syncs Campaigns and One to Ones Subscriptions for User based on their profile information. The user must be a Prompt Subscriber.
     * @param migrate After syncing, migrate away from old campaigns. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call syncPromptSubscriptionsAsync(Boolean migrate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = syncPromptSubscriptionsValidateBeforeCall(migrate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updatePrompt
     * @param id The prompt&#39;s id (required)
     * @param sendMechanism The mechanism for the prompt to be sent (optional)
     * @param facebookMessage The facebook message assigned to the prompt (optional)
     * @param twitterMessage The twitter message assigned to the prompt (optional)
     * @param videoId The id of the video. (optional)
     * @param emailId The id of the email. (optional)
     * @param subject The subject of the email (optional)
     * @param resetCache The subject of the email (optional)
     * @param resetEmailContent The subject of the email (optional)
     * @param status The status of the prompt (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePromptCall(String id, String sendMechanism, String facebookMessage, String twitterMessage, String videoId, String emailId, String subject, String resetCache, String resetEmailContent, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prompts/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (sendMechanism != null)
        localVarFormParams.put("sendMechanism", sendMechanism);
        if (facebookMessage != null)
        localVarFormParams.put("facebookMessage", facebookMessage);
        if (twitterMessage != null)
        localVarFormParams.put("twitterMessage", twitterMessage);
        if (videoId != null)
        localVarFormParams.put("videoId", videoId);
        if (emailId != null)
        localVarFormParams.put("emailId", emailId);
        if (subject != null)
        localVarFormParams.put("subject", subject);
        if (resetCache != null)
        localVarFormParams.put("resetCache", resetCache);
        if (resetEmailContent != null)
        localVarFormParams.put("resetEmailContent", resetEmailContent);
        if (status != null)
        localVarFormParams.put("status", status);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePromptValidateBeforeCall(String id, String sendMechanism, String facebookMessage, String twitterMessage, String videoId, String emailId, String subject, String resetCache, String resetEmailContent, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePrompt(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePromptCall(id, sendMechanism, facebookMessage, twitterMessage, videoId, emailId, subject, resetCache, resetEmailContent, status, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Prompt
     * Updates a Prompt
     * @param id The prompt&#39;s id (required)
     * @param sendMechanism The mechanism for the prompt to be sent (optional)
     * @param facebookMessage The facebook message assigned to the prompt (optional)
     * @param twitterMessage The twitter message assigned to the prompt (optional)
     * @param videoId The id of the video. (optional)
     * @param emailId The id of the email. (optional)
     * @param subject The subject of the email (optional)
     * @param resetCache The subject of the email (optional)
     * @param resetEmailContent The subject of the email (optional)
     * @param status The status of the prompt (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePrompt(String id, String sendMechanism, String facebookMessage, String twitterMessage, String videoId, String emailId, String subject, String resetCache, String resetEmailContent, String status) throws ApiException {
        updatePromptWithHttpInfo(id, sendMechanism, facebookMessage, twitterMessage, videoId, emailId, subject, resetCache, resetEmailContent, status);
    }

    /**
     * Update Prompt
     * Updates a Prompt
     * @param id The prompt&#39;s id (required)
     * @param sendMechanism The mechanism for the prompt to be sent (optional)
     * @param facebookMessage The facebook message assigned to the prompt (optional)
     * @param twitterMessage The twitter message assigned to the prompt (optional)
     * @param videoId The id of the video. (optional)
     * @param emailId The id of the email. (optional)
     * @param subject The subject of the email (optional)
     * @param resetCache The subject of the email (optional)
     * @param resetEmailContent The subject of the email (optional)
     * @param status The status of the prompt (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePromptWithHttpInfo(String id, String sendMechanism, String facebookMessage, String twitterMessage, String videoId, String emailId, String subject, String resetCache, String resetEmailContent, String status) throws ApiException {
        com.squareup.okhttp.Call call = updatePromptValidateBeforeCall(id, sendMechanism, facebookMessage, twitterMessage, videoId, emailId, subject, resetCache, resetEmailContent, status, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update Prompt (asynchronously)
     * Updates a Prompt
     * @param id The prompt&#39;s id (required)
     * @param sendMechanism The mechanism for the prompt to be sent (optional)
     * @param facebookMessage The facebook message assigned to the prompt (optional)
     * @param twitterMessage The twitter message assigned to the prompt (optional)
     * @param videoId The id of the video. (optional)
     * @param emailId The id of the email. (optional)
     * @param subject The subject of the email (optional)
     * @param resetCache The subject of the email (optional)
     * @param resetEmailContent The subject of the email (optional)
     * @param status The status of the prompt (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePromptAsync(String id, String sendMechanism, String facebookMessage, String twitterMessage, String videoId, String emailId, String subject, String resetCache, String resetEmailContent, String status, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePromptValidateBeforeCall(id, sendMechanism, facebookMessage, twitterMessage, videoId, emailId, subject, resetCache, resetEmailContent, status, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updatePromptBot
     * @param id The bot id. (required)
     * @param emailId The default email to use. (required)
     * @param name The name of the bot. (required)
     * @param subject The subject of the default email. (required)
     * @param content The content used in the default email. (required)
     * @param contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param templateId The template used to create the email id. (required)
     * @param listId The list id to attach the bot to. (optional)
     * @param videoId The video used in the default email. (optional)
     * @param endDate The time frame to complete sending to the list. (optional)
     * @param status The status of the bot. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePromptBotCall(String id, String emailId, String name, String subject, String content, String contactFieldValueColumn, String templateId, String listId, String videoId, String endDate, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prompts/bots/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (listId != null)
        localVarFormParams.put("listId", listId);
        if (emailId != null)
        localVarFormParams.put("emailId", emailId);
        if (videoId != null)
        localVarFormParams.put("videoId", videoId);
        if (endDate != null)
        localVarFormParams.put("endDate", endDate);
        if (status != null)
        localVarFormParams.put("status", status);
        if (name != null)
        localVarFormParams.put("name", name);
        if (subject != null)
        localVarFormParams.put("subject", subject);
        if (content != null)
        localVarFormParams.put("content", content);
        if (contactFieldValueColumn != null)
        localVarFormParams.put("contactFieldValueColumn", contactFieldValueColumn);
        if (templateId != null)
        localVarFormParams.put("templateId", templateId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePromptBotValidateBeforeCall(String id, String emailId, String name, String subject, String content, String contactFieldValueColumn, String templateId, String listId, String videoId, String endDate, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePromptBot(Async)");
        }
        
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling updatePromptBot(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updatePromptBot(Async)");
        }
        
        // verify the required parameter 'subject' is set
        if (subject == null) {
            throw new ApiException("Missing the required parameter 'subject' when calling updatePromptBot(Async)");
        }
        
        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling updatePromptBot(Async)");
        }
        
        // verify the required parameter 'contactFieldValueColumn' is set
        if (contactFieldValueColumn == null) {
            throw new ApiException("Missing the required parameter 'contactFieldValueColumn' when calling updatePromptBot(Async)");
        }
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling updatePromptBot(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePromptBotCall(id, emailId, name, subject, content, contactFieldValueColumn, templateId, listId, videoId, endDate, status, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Prompt Bot
     * Updates a Prompt Bot&#39;s settings.
     * @param id The bot id. (required)
     * @param emailId The default email to use. (required)
     * @param name The name of the bot. (required)
     * @param subject The subject of the default email. (required)
     * @param content The content used in the default email. (required)
     * @param contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param templateId The template used to create the email id. (required)
     * @param listId The list id to attach the bot to. (optional)
     * @param videoId The video used in the default email. (optional)
     * @param endDate The time frame to complete sending to the list. (optional)
     * @param status The status of the bot. (optional)
     * @return PromptBot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PromptBot updatePromptBot(String id, String emailId, String name, String subject, String content, String contactFieldValueColumn, String templateId, String listId, String videoId, String endDate, String status) throws ApiException {
        ApiResponse<PromptBot> resp = updatePromptBotWithHttpInfo(id, emailId, name, subject, content, contactFieldValueColumn, templateId, listId, videoId, endDate, status);
        return resp.getData();
    }

    /**
     * Update Prompt Bot
     * Updates a Prompt Bot&#39;s settings.
     * @param id The bot id. (required)
     * @param emailId The default email to use. (required)
     * @param name The name of the bot. (required)
     * @param subject The subject of the default email. (required)
     * @param content The content used in the default email. (required)
     * @param contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param templateId The template used to create the email id. (required)
     * @param listId The list id to attach the bot to. (optional)
     * @param videoId The video used in the default email. (optional)
     * @param endDate The time frame to complete sending to the list. (optional)
     * @param status The status of the bot. (optional)
     * @return ApiResponse&lt;PromptBot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PromptBot> updatePromptBotWithHttpInfo(String id, String emailId, String name, String subject, String content, String contactFieldValueColumn, String templateId, String listId, String videoId, String endDate, String status) throws ApiException {
        com.squareup.okhttp.Call call = updatePromptBotValidateBeforeCall(id, emailId, name, subject, content, contactFieldValueColumn, templateId, listId, videoId, endDate, status, null, null);
        Type localVarReturnType = new TypeToken<PromptBot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Prompt Bot (asynchronously)
     * Updates a Prompt Bot&#39;s settings.
     * @param id The bot id. (required)
     * @param emailId The default email to use. (required)
     * @param name The name of the bot. (required)
     * @param subject The subject of the default email. (required)
     * @param content The content used in the default email. (required)
     * @param contactFieldValueColumn The custom field value column with dates for this bot. (required)
     * @param templateId The template used to create the email id. (required)
     * @param listId The list id to attach the bot to. (optional)
     * @param videoId The video used in the default email. (optional)
     * @param endDate The time frame to complete sending to the list. (optional)
     * @param status The status of the bot. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePromptBotAsync(String id, String emailId, String name, String subject, String content, String contactFieldValueColumn, String templateId, String listId, String videoId, String endDate, String status, final ApiCallback<PromptBot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePromptBotValidateBeforeCall(id, emailId, name, subject, content, contactFieldValueColumn, templateId, listId, videoId, endDate, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PromptBot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePromptCampaign
     * @param clientGroupId The client group of the campaign. (required)
     * @param brandedTemplateId The template to use for branded feel emails. (optional)
     * @param personalTemplateId The template to use for personal feel emails. (optional)
     * @param enabled Set whether the user is able to start receiving prompts. (optional)
     * @param sendMechanism The way to send the prompt (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePromptCampaignCall(String clientGroupId, String brandedTemplateId, String personalTemplateId, Boolean enabled, String sendMechanism, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prompts/campaigns/{clientGroupId}"
            .replaceAll("\\{" + "clientGroupId" + "\\}", apiClient.escapeString(clientGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (brandedTemplateId != null)
        localVarFormParams.put("brandedTemplateId", brandedTemplateId);
        if (personalTemplateId != null)
        localVarFormParams.put("personalTemplateId", personalTemplateId);
        if (enabled != null)
        localVarFormParams.put("enabled", enabled);
        if (sendMechanism != null)
        localVarFormParams.put("sendMechanism", sendMechanism);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePromptCampaignValidateBeforeCall(String clientGroupId, String brandedTemplateId, String personalTemplateId, Boolean enabled, String sendMechanism, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientGroupId' is set
        if (clientGroupId == null) {
            throw new ApiException("Missing the required parameter 'clientGroupId' when calling updatePromptCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePromptCampaignCall(clientGroupId, brandedTemplateId, personalTemplateId, enabled, sendMechanism, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Prompt Campaign
     * Updates a Prompt Campaign&#39;s Settings
     * @param clientGroupId The client group of the campaign. (required)
     * @param brandedTemplateId The template to use for branded feel emails. (optional)
     * @param personalTemplateId The template to use for personal feel emails. (optional)
     * @param enabled Set whether the user is able to start receiving prompts. (optional)
     * @param sendMechanism The way to send the prompt (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePromptCampaign(String clientGroupId, String brandedTemplateId, String personalTemplateId, Boolean enabled, String sendMechanism) throws ApiException {
        updatePromptCampaignWithHttpInfo(clientGroupId, brandedTemplateId, personalTemplateId, enabled, sendMechanism);
    }

    /**
     * Update Prompt Campaign
     * Updates a Prompt Campaign&#39;s Settings
     * @param clientGroupId The client group of the campaign. (required)
     * @param brandedTemplateId The template to use for branded feel emails. (optional)
     * @param personalTemplateId The template to use for personal feel emails. (optional)
     * @param enabled Set whether the user is able to start receiving prompts. (optional)
     * @param sendMechanism The way to send the prompt (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePromptCampaignWithHttpInfo(String clientGroupId, String brandedTemplateId, String personalTemplateId, Boolean enabled, String sendMechanism) throws ApiException {
        com.squareup.okhttp.Call call = updatePromptCampaignValidateBeforeCall(clientGroupId, brandedTemplateId, personalTemplateId, enabled, sendMechanism, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update Prompt Campaign (asynchronously)
     * Updates a Prompt Campaign&#39;s Settings
     * @param clientGroupId The client group of the campaign. (required)
     * @param brandedTemplateId The template to use for branded feel emails. (optional)
     * @param personalTemplateId The template to use for personal feel emails. (optional)
     * @param enabled Set whether the user is able to start receiving prompts. (optional)
     * @param sendMechanism The way to send the prompt (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePromptCampaignAsync(String clientGroupId, String brandedTemplateId, String personalTemplateId, Boolean enabled, String sendMechanism, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePromptCampaignValidateBeforeCall(clientGroupId, brandedTemplateId, personalTemplateId, enabled, sendMechanism, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updatePromptTemplate
     * @param id The prompt&#39;s id (required)
     * @param alternateContentId The alternate content id (required)
     * @param newEmailId The prompt&#39;s new email id (required)
     * @param ogEmailId The prompt&#39;s original email id (required)
     * @param newExampleVideoId The prompt&#39;s new tutorial video id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePromptTemplateCall(String id, String alternateContentId, String newEmailId, String ogEmailId, String newExampleVideoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/prompts/{id}/content"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (alternateContentId != null)
        localVarFormParams.put("alternateContentId", alternateContentId);
        if (newEmailId != null)
        localVarFormParams.put("newEmailId", newEmailId);
        if (ogEmailId != null)
        localVarFormParams.put("ogEmailId", ogEmailId);
        if (newExampleVideoId != null)
        localVarFormParams.put("newExampleVideoId", newExampleVideoId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePromptTemplateValidateBeforeCall(String id, String alternateContentId, String newEmailId, String ogEmailId, String newExampleVideoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePromptTemplate(Async)");
        }
        
        // verify the required parameter 'alternateContentId' is set
        if (alternateContentId == null) {
            throw new ApiException("Missing the required parameter 'alternateContentId' when calling updatePromptTemplate(Async)");
        }
        
        // verify the required parameter 'newEmailId' is set
        if (newEmailId == null) {
            throw new ApiException("Missing the required parameter 'newEmailId' when calling updatePromptTemplate(Async)");
        }
        
        // verify the required parameter 'ogEmailId' is set
        if (ogEmailId == null) {
            throw new ApiException("Missing the required parameter 'ogEmailId' when calling updatePromptTemplate(Async)");
        }
        
        // verify the required parameter 'newExampleVideoId' is set
        if (newExampleVideoId == null) {
            throw new ApiException("Missing the required parameter 'newExampleVideoId' when calling updatePromptTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePromptTemplateCall(id, alternateContentId, newEmailId, ogEmailId, newExampleVideoId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Prompt Content
     * Updates a Prompt Content
     * @param id The prompt&#39;s id (required)
     * @param alternateContentId The alternate content id (required)
     * @param newEmailId The prompt&#39;s new email id (required)
     * @param ogEmailId The prompt&#39;s original email id (required)
     * @param newExampleVideoId The prompt&#39;s new tutorial video id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updatePromptTemplate(String id, String alternateContentId, String newEmailId, String ogEmailId, String newExampleVideoId) throws ApiException {
        updatePromptTemplateWithHttpInfo(id, alternateContentId, newEmailId, ogEmailId, newExampleVideoId);
    }

    /**
     * Update Prompt Content
     * Updates a Prompt Content
     * @param id The prompt&#39;s id (required)
     * @param alternateContentId The alternate content id (required)
     * @param newEmailId The prompt&#39;s new email id (required)
     * @param ogEmailId The prompt&#39;s original email id (required)
     * @param newExampleVideoId The prompt&#39;s new tutorial video id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updatePromptTemplateWithHttpInfo(String id, String alternateContentId, String newEmailId, String ogEmailId, String newExampleVideoId) throws ApiException {
        com.squareup.okhttp.Call call = updatePromptTemplateValidateBeforeCall(id, alternateContentId, newEmailId, ogEmailId, newExampleVideoId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update Prompt Content (asynchronously)
     * Updates a Prompt Content
     * @param id The prompt&#39;s id (required)
     * @param alternateContentId The alternate content id (required)
     * @param newEmailId The prompt&#39;s new email id (required)
     * @param ogEmailId The prompt&#39;s original email id (required)
     * @param newExampleVideoId The prompt&#39;s new tutorial video id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePromptTemplateAsync(String id, String alternateContentId, String newEmailId, String ogEmailId, String newExampleVideoId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePromptTemplateValidateBeforeCall(id, alternateContentId, newEmailId, ogEmailId, newExampleVideoId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
