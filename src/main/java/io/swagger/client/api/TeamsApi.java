/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.TeamPublicRepresentation;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.JerichoConfiguration;
import io.swagger.client.model.JerichoPerformance;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TeamsApi {
    private ApiClient apiClient;

    public TeamsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeamsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addTeamMember */
    private com.squareup.okhttp.Call addTeamMemberCall(String teamId, Boolean admin, String subgroupIds, String userEmail, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling addTeamMember(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/{teamId}/member".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "teamId" + "\\}", apiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (admin != null)
        localVarFormParams.put("admin", admin);
        if (subgroupIds != null)
        localVarFormParams.put("subgroupIds", subgroupIds);
        if (userEmail != null)
        localVarFormParams.put("userEmail", userEmail);
        if (userId != null)
        localVarFormParams.put("userId", userId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Add Member to Team
     * Adds a member to a team.
     * @param teamId The team id (required)
     * @param admin Set if the user is an admin of this team. (optional)
     * @param subgroupIds Subgroup IDs to add user to (optional)
     * @param userEmail The email of the member being added to the team. (optional)
     * @param userId The user id of the member being added to the team. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String addTeamMember(String teamId, Boolean admin, String subgroupIds, String userEmail, String userId) throws ApiException {
        ApiResponse<String> resp = addTeamMemberWithHttpInfo(teamId, admin, subgroupIds, userEmail, userId);
        return resp.getData();
    }

    /**
     * Add Member to Team
     * Adds a member to a team.
     * @param teamId The team id (required)
     * @param admin Set if the user is an admin of this team. (optional)
     * @param subgroupIds Subgroup IDs to add user to (optional)
     * @param userEmail The email of the member being added to the team. (optional)
     * @param userId The user id of the member being added to the team. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> addTeamMemberWithHttpInfo(String teamId, Boolean admin, String subgroupIds, String userEmail, String userId) throws ApiException {
        com.squareup.okhttp.Call call = addTeamMemberCall(teamId, admin, subgroupIds, userEmail, userId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Member to Team (asynchronously)
     * Adds a member to a team.
     * @param teamId The team id (required)
     * @param admin Set if the user is an admin of this team. (optional)
     * @param subgroupIds Subgroup IDs to add user to (optional)
     * @param userEmail The email of the member being added to the team. (optional)
     * @param userId The user id of the member being added to the team. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTeamMemberAsync(String teamId, Boolean admin, String subgroupIds, String userEmail, String userId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTeamMemberCall(teamId, admin, subgroupIds, userEmail, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addUsers */
    private com.squareup.okhttp.Call addUsersCall(String teamId, String userDetails, String sendWelcomeEmail, String subgroupIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling addUsers(Async)");
        }
        
        // verify the required parameter 'userDetails' is set
        if (userDetails == null) {
            throw new ApiException("Missing the required parameter 'userDetails' when calling addUsers(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/{teamId}/members".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "teamId" + "\\}", apiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (userDetails != null)
        localVarFormParams.put("userDetails", userDetails);
        if (sendWelcomeEmail != null)
        localVarFormParams.put("sendWelcomeEmail", sendWelcomeEmail);
        if (subgroupIds != null)
        localVarFormParams.put("subgroupIds", subgroupIds);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Add users to group.
     * Add a new or existing user to group.
     * @param teamId The team id (required)
     * @param userDetails Array of emails or objects containing details needed to create user (required)
     * @param sendWelcomeEmail Whether to send welcome email to new users (optional)
     * @param subgroupIds Subgroup IDs to add user to (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addUsers(String teamId, String userDetails, String sendWelcomeEmail, String subgroupIds) throws ApiException {
        addUsersWithHttpInfo(teamId, userDetails, sendWelcomeEmail, subgroupIds);
    }

    /**
     * Add users to group.
     * Add a new or existing user to group.
     * @param teamId The team id (required)
     * @param userDetails Array of emails or objects containing details needed to create user (required)
     * @param sendWelcomeEmail Whether to send welcome email to new users (optional)
     * @param subgroupIds Subgroup IDs to add user to (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addUsersWithHttpInfo(String teamId, String userDetails, String sendWelcomeEmail, String subgroupIds) throws ApiException {
        com.squareup.okhttp.Call call = addUsersCall(teamId, userDetails, sendWelcomeEmail, subgroupIds, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add users to group. (asynchronously)
     * Add a new or existing user to group.
     * @param teamId The team id (required)
     * @param userDetails Array of emails or objects containing details needed to create user (required)
     * @param sendWelcomeEmail Whether to send welcome email to new users (optional)
     * @param subgroupIds Subgroup IDs to add user to (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addUsersAsync(String teamId, String userDetails, String sendWelcomeEmail, String subgroupIds, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addUsersCall(teamId, userDetails, sendWelcomeEmail, subgroupIds, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for addUsersFromCsv */
    private com.squareup.okhttp.Call addUsersFromCsvCall(String teamId, String csvImportId, String map, String sendWelcomeEmail, String subgroupIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling addUsersFromCsv(Async)");
        }
        
        // verify the required parameter 'csvImportId' is set
        if (csvImportId == null) {
            throw new ApiException("Missing the required parameter 'csvImportId' when calling addUsersFromCsv(Async)");
        }
        
        // verify the required parameter 'map' is set
        if (map == null) {
            throw new ApiException("Missing the required parameter 'map' when calling addUsersFromCsv(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/{teamId}/members/csv".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "teamId" + "\\}", apiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (csvImportId != null)
        localVarFormParams.put("csvImportId", csvImportId);
        if (map != null)
        localVarFormParams.put("map", map);
        if (sendWelcomeEmail != null)
        localVarFormParams.put("sendWelcomeEmail", sendWelcomeEmail);
        if (subgroupIds != null)
        localVarFormParams.put("subgroupIds", subgroupIds);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Add members to group from CSV
     * Imports members to a group from a given CSV ID.
     * @param teamId The team id (required)
     * @param csvImportId ID of the CSV to import (required)
     * @param map Object to use when mapping import to AccountCreateDetails. Key is property name on details, value is CSV column number. (required)
     * @param sendWelcomeEmail Whether to send welcome email to new users (optional)
     * @param subgroupIds Subgroup IDs to add user to (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addUsersFromCsv(String teamId, String csvImportId, String map, String sendWelcomeEmail, String subgroupIds) throws ApiException {
        addUsersFromCsvWithHttpInfo(teamId, csvImportId, map, sendWelcomeEmail, subgroupIds);
    }

    /**
     * Add members to group from CSV
     * Imports members to a group from a given CSV ID.
     * @param teamId The team id (required)
     * @param csvImportId ID of the CSV to import (required)
     * @param map Object to use when mapping import to AccountCreateDetails. Key is property name on details, value is CSV column number. (required)
     * @param sendWelcomeEmail Whether to send welcome email to new users (optional)
     * @param subgroupIds Subgroup IDs to add user to (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addUsersFromCsvWithHttpInfo(String teamId, String csvImportId, String map, String sendWelcomeEmail, String subgroupIds) throws ApiException {
        com.squareup.okhttp.Call call = addUsersFromCsvCall(teamId, csvImportId, map, sendWelcomeEmail, subgroupIds, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add members to group from CSV (asynchronously)
     * Imports members to a group from a given CSV ID.
     * @param teamId The team id (required)
     * @param csvImportId ID of the CSV to import (required)
     * @param map Object to use when mapping import to AccountCreateDetails. Key is property name on details, value is CSV column number. (required)
     * @param sendWelcomeEmail Whether to send welcome email to new users (optional)
     * @param subgroupIds Subgroup IDs to add user to (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addUsersFromCsvAsync(String teamId, String csvImportId, String map, String sendWelcomeEmail, String subgroupIds, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addUsersFromCsvCall(teamId, csvImportId, map, sendWelcomeEmail, subgroupIds, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for cancelJerichoSend */
    private com.squareup.okhttp.Call cancelJerichoSendCall(String jerichoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'jerichoId' is set
        if (jerichoId == null) {
            throw new ApiException("Missing the required parameter 'jerichoId' when calling cancelJerichoSend(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/{teamId}/jericho/{jerichoId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "jerichoId" + "\\}", apiClient.escapeString(jerichoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Cancel a Jericho Send
     * Cancels a scheduled Jericho send from being sent.
     * @param jerichoId ID of the Jericho Job to cancel (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void cancelJerichoSend(String jerichoId) throws ApiException {
        cancelJerichoSendWithHttpInfo(jerichoId);
    }

    /**
     * Cancel a Jericho Send
     * Cancels a scheduled Jericho send from being sent.
     * @param jerichoId ID of the Jericho Job to cancel (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> cancelJerichoSendWithHttpInfo(String jerichoId) throws ApiException {
        com.squareup.okhttp.Call call = cancelJerichoSendCall(jerichoId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Cancel a Jericho Send (asynchronously)
     * Cancels a scheduled Jericho send from being sent.
     * @param jerichoId ID of the Jericho Job to cancel (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelJerichoSendAsync(String jerichoId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelJerichoSendCall(jerichoId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for createSubteam */
    private com.squareup.okhttp.Call createSubteamCall(String teamId, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling createSubteam(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createSubteam(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/{teamId}/subteam".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "teamId" + "\\}", apiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (name != null)
        localVarFormParams.put("name", name);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Add a Subteam
     * Adds a subteam to a parent team
     * @param teamId The team id (required)
     * @param name The subteam&#39;s name. (required)
     * @return TeamPublicRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TeamPublicRepresentation createSubteam(String teamId, String name) throws ApiException {
        ApiResponse<TeamPublicRepresentation> resp = createSubteamWithHttpInfo(teamId, name);
        return resp.getData();
    }

    /**
     * Add a Subteam
     * Adds a subteam to a parent team
     * @param teamId The team id (required)
     * @param name The subteam&#39;s name. (required)
     * @return ApiResponse&lt;TeamPublicRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TeamPublicRepresentation> createSubteamWithHttpInfo(String teamId, String name) throws ApiException {
        com.squareup.okhttp.Call call = createSubteamCall(teamId, name, null, null);
        Type localVarReturnType = new TypeToken<TeamPublicRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a Subteam (asynchronously)
     * Adds a subteam to a parent team
     * @param teamId The team id (required)
     * @param name The subteam&#39;s name. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSubteamAsync(String teamId, String name, final ApiCallback<TeamPublicRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSubteamCall(teamId, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TeamPublicRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteSubteam */
    private com.squareup.okhttp.Call deleteSubteamCall(String teamId, String subteamId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling deleteSubteam(Async)");
        }
        
        // verify the required parameter 'subteamId' is set
        if (subteamId == null) {
            throw new ApiException("Missing the required parameter 'subteamId' when calling deleteSubteam(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/{teamId}/subteam".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "teamId" + "\\}", apiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (subteamId != null)
        localVarFormParams.put("subteamId", subteamId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete Subteam
     * Deletes a subteam
     * @param teamId The team id (required)
     * @param subteamId The subteam you wish to delete. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteSubteam(String teamId, String subteamId) throws ApiException {
        ApiResponse<String> resp = deleteSubteamWithHttpInfo(teamId, subteamId);
        return resp.getData();
    }

    /**
     * Delete Subteam
     * Deletes a subteam
     * @param teamId The team id (required)
     * @param subteamId The subteam you wish to delete. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteSubteamWithHttpInfo(String teamId, String subteamId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSubteamCall(teamId, subteamId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Subteam (asynchronously)
     * Deletes a subteam
     * @param teamId The team id (required)
     * @param subteamId The subteam you wish to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSubteamAsync(String teamId, String subteamId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSubteamCall(teamId, subteamId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllClientGroupAssociations */
    private com.squareup.okhttp.Call getAllClientGroupAssociationsCall(String clientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling getAllClientGroupAssociations(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/associations/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (clientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "clientId", clientId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists team associations
     * Returns a collection of team associations for a given user
     * @param clientId The clientId requesting group associations. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getAllClientGroupAssociations(String clientId) throws ApiException {
        getAllClientGroupAssociationsWithHttpInfo(clientId);
    }

    /**
     * Lists team associations
     * Returns a collection of team associations for a given user
     * @param clientId The clientId requesting group associations. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getAllClientGroupAssociationsWithHttpInfo(String clientId) throws ApiException {
        com.squareup.okhttp.Call call = getAllClientGroupAssociationsCall(clientId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Lists team associations (asynchronously)
     * Returns a collection of team associations for a given user
     * @param clientId The clientId requesting group associations. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllClientGroupAssociationsAsync(String clientId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllClientGroupAssociationsCall(clientId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getClientGroupAssets */
    private com.squareup.okhttp.Call getClientGroupAssetsCall(String assetType, String teamId, String autoTagName, String pageSize, String page, String search, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'assetType' is set
        if (assetType == null) {
            throw new ApiException("Missing the required parameter 'assetType' when calling getClientGroupAssets(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/assets/".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (assetType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "assetType", assetType));
        if (teamId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "teamId", teamId));
        if (autoTagName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "autoTagName", autoTagName));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "search", search));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Lists team assets
     * Returns a collection of assets
     * @param assetType The type of assets. (required)
     * @param teamId The team containing the assets. (optional)
     * @param autoTagName The auto tag name containing the assets. (optional)
     * @param pageSize The number of items to retrieve in a single db query. (optional)
     * @param page Zero-based index of the page of data to retrieve from the db. (optional)
     * @param search Search words. (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 getClientGroupAssets(String assetType, String teamId, String autoTagName, String pageSize, String page, String search) throws ApiException {
        ApiResponse<InlineResponse200> resp = getClientGroupAssetsWithHttpInfo(assetType, teamId, autoTagName, pageSize, page, search);
        return resp.getData();
    }

    /**
     * Lists team assets
     * Returns a collection of assets
     * @param assetType The type of assets. (required)
     * @param teamId The team containing the assets. (optional)
     * @param autoTagName The auto tag name containing the assets. (optional)
     * @param pageSize The number of items to retrieve in a single db query. (optional)
     * @param page Zero-based index of the page of data to retrieve from the db. (optional)
     * @param search Search words. (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> getClientGroupAssetsWithHttpInfo(String assetType, String teamId, String autoTagName, String pageSize, String page, String search) throws ApiException {
        com.squareup.okhttp.Call call = getClientGroupAssetsCall(assetType, teamId, autoTagName, pageSize, page, search, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists team assets (asynchronously)
     * Returns a collection of assets
     * @param assetType The type of assets. (required)
     * @param teamId The team containing the assets. (optional)
     * @param autoTagName The auto tag name containing the assets. (optional)
     * @param pageSize The number of items to retrieve in a single db query. (optional)
     * @param page Zero-based index of the page of data to retrieve from the db. (optional)
     * @param search Search words. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClientGroupAssetsAsync(String assetType, String teamId, String autoTagName, String pageSize, String page, String search, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientGroupAssetsCall(assetType, teamId, autoTagName, pageSize, page, search, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getClientGroupStatistics */
    private com.squareup.okhttp.Call getClientGroupStatisticsCall(String teamId, String memberStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getClientGroupStatistics(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/{teamId}/stats".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "teamId" + "\\}", apiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (memberStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "memberStatus", memberStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get Team statistics
     * Get top level statistic data for a Team
     * @param teamId The team id (required)
     * @param memberStatus The status of members to query for (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getClientGroupStatistics(String teamId, String memberStatus) throws ApiException {
        getClientGroupStatisticsWithHttpInfo(teamId, memberStatus);
    }

    /**
     * Get Team statistics
     * Get top level statistic data for a Team
     * @param teamId The team id (required)
     * @param memberStatus The status of members to query for (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getClientGroupStatisticsWithHttpInfo(String teamId, String memberStatus) throws ApiException {
        com.squareup.okhttp.Call call = getClientGroupStatisticsCall(teamId, memberStatus, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get Team statistics (asynchronously)
     * Get top level statistic data for a Team
     * @param teamId The team id (required)
     * @param memberStatus The status of members to query for (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClientGroupStatisticsAsync(String teamId, String memberStatus, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientGroupStatisticsCall(teamId, memberStatus, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getJerichoSends */
    private com.squareup.okhttp.Call getJerichoSendsCall(String teamId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getJerichoSends(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/{teamId}/jericho".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "teamId" + "\\}", apiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List Jericho Sends
     * Lists Jericho sends, both pending and sent.
     * @param teamId The team whose Jericho sends you wish to see. (required)
     * @return List&lt;JerichoConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JerichoConfiguration> getJerichoSends(String teamId) throws ApiException {
        ApiResponse<List<JerichoConfiguration>> resp = getJerichoSendsWithHttpInfo(teamId);
        return resp.getData();
    }

    /**
     * List Jericho Sends
     * Lists Jericho sends, both pending and sent.
     * @param teamId The team whose Jericho sends you wish to see. (required)
     * @return ApiResponse&lt;List&lt;JerichoConfiguration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JerichoConfiguration>> getJerichoSendsWithHttpInfo(String teamId) throws ApiException {
        com.squareup.okhttp.Call call = getJerichoSendsCall(teamId, null, null);
        Type localVarReturnType = new TypeToken<List<JerichoConfiguration>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Jericho Sends (asynchronously)
     * Lists Jericho sends, both pending and sent.
     * @param teamId The team whose Jericho sends you wish to see. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJerichoSendsAsync(String teamId, final ApiCallback<List<JerichoConfiguration>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJerichoSendsCall(teamId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<JerichoConfiguration>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getJerichoStats */
    private com.squareup.okhttp.Call getJerichoStatsCall(String jerichoId, String teamId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'jerichoId' is set
        if (jerichoId == null) {
            throw new ApiException("Missing the required parameter 'jerichoId' when calling getJerichoStats(Async)");
        }
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getJerichoStats(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/{teamId}/jericho/{jerichoId}/performance".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "jerichoId" + "\\}", apiClient.escapeString(jerichoId.toString()))
        .replaceAll("\\{" + "teamId" + "\\}", apiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets Jericho performance statistics
     * Returns an aggregate view of the performance of a Jericho send
     * @param jerichoId ID of the Jericho job (required)
     * @param teamId ID of team through which Jericho was sent (required)
     * @return JerichoPerformance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JerichoPerformance getJerichoStats(String jerichoId, String teamId) throws ApiException {
        ApiResponse<JerichoPerformance> resp = getJerichoStatsWithHttpInfo(jerichoId, teamId);
        return resp.getData();
    }

    /**
     * Gets Jericho performance statistics
     * Returns an aggregate view of the performance of a Jericho send
     * @param jerichoId ID of the Jericho job (required)
     * @param teamId ID of team through which Jericho was sent (required)
     * @return ApiResponse&lt;JerichoPerformance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JerichoPerformance> getJerichoStatsWithHttpInfo(String jerichoId, String teamId) throws ApiException {
        com.squareup.okhttp.Call call = getJerichoStatsCall(jerichoId, teamId, null, null);
        Type localVarReturnType = new TypeToken<JerichoPerformance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets Jericho performance statistics (asynchronously)
     * Returns an aggregate view of the performance of a Jericho send
     * @param jerichoId ID of the Jericho job (required)
     * @param teamId ID of team through which Jericho was sent (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJerichoStatsAsync(String jerichoId, String teamId, final ApiCallback<JerichoPerformance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getJerichoStatsCall(jerichoId, teamId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JerichoPerformance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPagedClientGroupMembers */
    private com.squareup.okhttp.Call getPagedClientGroupMembersCall(String teamId, String pageSize, String page, String status, String search, String orderBy, String orderDirection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getPagedClientGroupMembers(Async)");
        }
        
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getPagedClientGroupMembers(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getPagedClientGroupMembers(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/{teamId}/members".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "teamId" + "\\}", apiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageSize", pageSize));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "search", search));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "orderBy", orderBy));
        if (orderDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "orderDirection", orderDirection));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List Team Members
     * Get a paginated listing of Team members
     * @param teamId The team id (required)
     * @param pageSize Amount of records to return in a page. (required)
     * @param page The page to return. (required)
     * @param status The status type to filter by. (optional)
     * @param search Filter results with names that match the search term. (optional)
     * @param orderBy Key to order results by (optional)
     * @param orderDirection ASC or DESC (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getPagedClientGroupMembers(String teamId, String pageSize, String page, String status, String search, String orderBy, String orderDirection) throws ApiException {
        getPagedClientGroupMembersWithHttpInfo(teamId, pageSize, page, status, search, orderBy, orderDirection);
    }

    /**
     * List Team Members
     * Get a paginated listing of Team members
     * @param teamId The team id (required)
     * @param pageSize Amount of records to return in a page. (required)
     * @param page The page to return. (required)
     * @param status The status type to filter by. (optional)
     * @param search Filter results with names that match the search term. (optional)
     * @param orderBy Key to order results by (optional)
     * @param orderDirection ASC or DESC (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getPagedClientGroupMembersWithHttpInfo(String teamId, String pageSize, String page, String status, String search, String orderBy, String orderDirection) throws ApiException {
        com.squareup.okhttp.Call call = getPagedClientGroupMembersCall(teamId, pageSize, page, status, search, orderBy, orderDirection, null, null);
        return apiClient.execute(call);
    }

    /**
     * List Team Members (asynchronously)
     * Get a paginated listing of Team members
     * @param teamId The team id (required)
     * @param pageSize Amount of records to return in a page. (required)
     * @param page The page to return. (required)
     * @param status The status type to filter by. (optional)
     * @param search Filter results with names that match the search term. (optional)
     * @param orderBy Key to order results by (optional)
     * @param orderDirection ASC or DESC (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPagedClientGroupMembersAsync(String teamId, String pageSize, String page, String status, String search, String orderBy, String orderDirection, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPagedClientGroupMembersCall(teamId, pageSize, page, status, search, orderBy, orderDirection, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getSubteams */
    private com.squareup.okhttp.Call getSubteamsCall(String teamId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getSubteams(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/{teamId}/subteam".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "teamId" + "\\}", apiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List Subteams
     * Returns a collection of subteams for a parent team
     * @param teamId The team id (required)
     * @return List&lt;TeamPublicRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TeamPublicRepresentation> getSubteams(String teamId) throws ApiException {
        ApiResponse<List<TeamPublicRepresentation>> resp = getSubteamsWithHttpInfo(teamId);
        return resp.getData();
    }

    /**
     * List Subteams
     * Returns a collection of subteams for a parent team
     * @param teamId The team id (required)
     * @return ApiResponse&lt;List&lt;TeamPublicRepresentation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TeamPublicRepresentation>> getSubteamsWithHttpInfo(String teamId) throws ApiException {
        com.squareup.okhttp.Call call = getSubteamsCall(teamId, null, null);
        Type localVarReturnType = new TypeToken<List<TeamPublicRepresentation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Subteams (asynchronously)
     * Returns a collection of subteams for a parent team
     * @param teamId The team id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubteamsAsync(String teamId, final ApiCallback<List<TeamPublicRepresentation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubteamsCall(teamId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TeamPublicRepresentation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTeamPromptAggregateStats */
    private com.squareup.okhttp.Call getTeamPromptAggregateStatsCall(String clientGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'clientGroupId' is set
        if (clientGroupId == null) {
            throw new ApiException("Missing the required parameter 'clientGroupId' when calling getTeamPromptAggregateStats(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/{clientGroupId}/campaign/stats".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "clientGroupId" + "\\}", apiClient.escapeString(clientGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get aggregate stats for campaigns
     * Get all the campaigns aggregate stats
     * @param clientGroupId ID of the client group association (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getTeamPromptAggregateStats(String clientGroupId) throws ApiException {
        getTeamPromptAggregateStatsWithHttpInfo(clientGroupId);
    }

    /**
     * Get aggregate stats for campaigns
     * Get all the campaigns aggregate stats
     * @param clientGroupId ID of the client group association (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getTeamPromptAggregateStatsWithHttpInfo(String clientGroupId) throws ApiException {
        com.squareup.okhttp.Call call = getTeamPromptAggregateStatsCall(clientGroupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get aggregate stats for campaigns (asynchronously)
     * Get all the campaigns aggregate stats
     * @param clientGroupId ID of the client group association (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTeamPromptAggregateStatsAsync(String clientGroupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTeamPromptAggregateStatsCall(clientGroupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getTeamPromptCampaigns */
    private com.squareup.okhttp.Call getTeamPromptCampaignsCall(String clientGroupId, String searchTerm, String currentPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'clientGroupId' is set
        if (clientGroupId == null) {
            throw new ApiException("Missing the required parameter 'clientGroupId' when calling getTeamPromptCampaigns(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/{clientGroupId}/campaign".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "clientGroupId" + "\\}", apiClient.escapeString(clientGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "searchTerm", searchTerm));
        if (currentPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "currentPage", currentPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get campaigns for team
     * Get campaigns for the team and their stats
     * @param clientGroupId ID of the client group association (required)
     * @param searchTerm The value to search for in prompt subject (optional)
     * @param currentPage The current page (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getTeamPromptCampaigns(String clientGroupId, String searchTerm, String currentPage) throws ApiException {
        getTeamPromptCampaignsWithHttpInfo(clientGroupId, searchTerm, currentPage);
    }

    /**
     * Get campaigns for team
     * Get campaigns for the team and their stats
     * @param clientGroupId ID of the client group association (required)
     * @param searchTerm The value to search for in prompt subject (optional)
     * @param currentPage The current page (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getTeamPromptCampaignsWithHttpInfo(String clientGroupId, String searchTerm, String currentPage) throws ApiException {
        com.squareup.okhttp.Call call = getTeamPromptCampaignsCall(clientGroupId, searchTerm, currentPage, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get campaigns for team (asynchronously)
     * Get campaigns for the team and their stats
     * @param clientGroupId ID of the client group association (required)
     * @param searchTerm The value to search for in prompt subject (optional)
     * @param currentPage The current page (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTeamPromptCampaignsAsync(String clientGroupId, String searchTerm, String currentPage, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTeamPromptCampaignsCall(clientGroupId, searchTerm, currentPage, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for inviteToSocialPromptTeam */
    private com.squareup.okhttp.Call inviteToSocialPromptTeamCall(String teamId, String listId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling inviteToSocialPromptTeam(Async)");
        }
        
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling inviteToSocialPromptTeam(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/teams/prompt/invite".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (teamId != null)
        localVarFormParams.put("teamId", teamId);
        if (listId != null)
        localVarFormParams.put("listId", listId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Invite a list to join the admin&#39;s social prompt team
     * Invite to Social Prompt Team
     * @param teamId The team id (required)
     * @param listId List to invite to the social prompt team. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void inviteToSocialPromptTeam(String teamId, String listId) throws ApiException {
        inviteToSocialPromptTeamWithHttpInfo(teamId, listId);
    }

    /**
     * Invite a list to join the admin&#39;s social prompt team
     * Invite to Social Prompt Team
     * @param teamId The team id (required)
     * @param listId List to invite to the social prompt team. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> inviteToSocialPromptTeamWithHttpInfo(String teamId, String listId) throws ApiException {
        com.squareup.okhttp.Call call = inviteToSocialPromptTeamCall(teamId, listId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Invite a list to join the admin&#39;s social prompt team (asynchronously)
     * Invite to Social Prompt Team
     * @param teamId The team id (required)
     * @param listId List to invite to the social prompt team. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call inviteToSocialPromptTeamAsync(String teamId, String listId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = inviteToSocialPromptTeamCall(teamId, listId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for queueJerichoSend */
    private com.squareup.okhttp.Call queueJerichoSendCall(JerichoConfiguration config, String teamId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = config;
        
        // verify the required parameter 'config' is set
        if (config == null) {
            throw new ApiException("Missing the required parameter 'config' when calling queueJerichoSend(Async)");
        }
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling queueJerichoSend(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/{teamId}/jericho".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "teamId" + "\\}", apiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Creates a Jericho send.
     * Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.
     * @param config JSON representing a Jericho configuration (required)
     * @param teamId The ID of the team. (required)
     * @return JerichoConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JerichoConfiguration queueJerichoSend(JerichoConfiguration config, String teamId) throws ApiException {
        ApiResponse<JerichoConfiguration> resp = queueJerichoSendWithHttpInfo(config, teamId);
        return resp.getData();
    }

    /**
     * Creates a Jericho send.
     * Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.
     * @param config JSON representing a Jericho configuration (required)
     * @param teamId The ID of the team. (required)
     * @return ApiResponse&lt;JerichoConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JerichoConfiguration> queueJerichoSendWithHttpInfo(JerichoConfiguration config, String teamId) throws ApiException {
        com.squareup.okhttp.Call call = queueJerichoSendCall(config, teamId, null, null);
        Type localVarReturnType = new TypeToken<JerichoConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a Jericho send. (asynchronously)
     * Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.
     * @param config JSON representing a Jericho configuration (required)
     * @param teamId The ID of the team. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queueJerichoSendAsync(JerichoConfiguration config, String teamId, final ApiCallback<JerichoConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queueJerichoSendCall(config, teamId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JerichoConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for removeMemberFromTeam */
    private com.squareup.okhttp.Call removeMemberFromTeamCall(String teamId, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling removeMemberFromTeam(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeMemberFromTeam(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/{teamId}/member/{userId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "teamId" + "\\}", apiClient.escapeString(teamId.toString()))
        .replaceAll("\\{" + "userId" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Remove Member from Team
     * Removes a member from a team.
     * @param teamId The team id (required)
     * @param userId The user id of the member being removed. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String removeMemberFromTeam(String teamId, String userId) throws ApiException {
        ApiResponse<String> resp = removeMemberFromTeamWithHttpInfo(teamId, userId);
        return resp.getData();
    }

    /**
     * Remove Member from Team
     * Removes a member from a team.
     * @param teamId The team id (required)
     * @param userId The user id of the member being removed. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> removeMemberFromTeamWithHttpInfo(String teamId, String userId) throws ApiException {
        com.squareup.okhttp.Call call = removeMemberFromTeamCall(teamId, userId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove Member from Team (asynchronously)
     * Removes a member from a team.
     * @param teamId The team id (required)
     * @param userId The user id of the member being removed. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeMemberFromTeamAsync(String teamId, String userId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeMemberFromTeamCall(teamId, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for resendTeamMemberInvitation */
    private com.squareup.okhttp.Call resendTeamMemberInvitationCall(String teamId, String memberUserId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling resendTeamMemberInvitation(Async)");
        }
        
        // verify the required parameter 'memberUserId' is set
        if (memberUserId == null) {
            throw new ApiException("Missing the required parameter 'memberUserId' when calling resendTeamMemberInvitation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/{teamId}/{memberUserId}/rewelcome".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "teamId" + "\\}", apiClient.escapeString(teamId.toString()))
        .replaceAll("\\{" + "memberUserId" + "\\}", apiClient.escapeString(memberUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Resend invite
     * Resend invitation to a member of a team
     * @param teamId The team id (required)
     * @param memberUserId The user id of the member being resent an invitation. (required)
     * @return TeamPublicRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TeamPublicRepresentation resendTeamMemberInvitation(String teamId, String memberUserId) throws ApiException {
        ApiResponse<TeamPublicRepresentation> resp = resendTeamMemberInvitationWithHttpInfo(teamId, memberUserId);
        return resp.getData();
    }

    /**
     * Resend invite
     * Resend invitation to a member of a team
     * @param teamId The team id (required)
     * @param memberUserId The user id of the member being resent an invitation. (required)
     * @return ApiResponse&lt;TeamPublicRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TeamPublicRepresentation> resendTeamMemberInvitationWithHttpInfo(String teamId, String memberUserId) throws ApiException {
        com.squareup.okhttp.Call call = resendTeamMemberInvitationCall(teamId, memberUserId, null, null);
        Type localVarReturnType = new TypeToken<TeamPublicRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resend invite (asynchronously)
     * Resend invitation to a member of a team
     * @param teamId The team id (required)
     * @param memberUserId The user id of the member being resent an invitation. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resendTeamMemberInvitationAsync(String teamId, String memberUserId, final ApiCallback<TeamPublicRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resendTeamMemberInvitationCall(teamId, memberUserId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TeamPublicRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateJerichoPromptSend */
    private com.squareup.okhttp.Call updateJerichoPromptSendCall(String teamId, String jerichoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling updateJerichoPromptSend(Async)");
        }
        
        // verify the required parameter 'jerichoId' is set
        if (jerichoId == null) {
            throw new ApiException("Missing the required parameter 'jerichoId' when calling updateJerichoPromptSend(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/{teamId}/jericho/{jerichoId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "teamId" + "\\}", apiClient.escapeString(teamId.toString()))
        .replaceAll("\\{" + "jerichoId" + "\\}", apiClient.escapeString(jerichoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Updates the Jericho Prompt Settings
     * Updates the prompt settings based on the original email id
     * @param teamId The team id (required)
     * @param jerichoId ID of the Jericho job (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateJerichoPromptSend(String teamId, String jerichoId) throws ApiException {
        updateJerichoPromptSendWithHttpInfo(teamId, jerichoId);
    }

    /**
     * Updates the Jericho Prompt Settings
     * Updates the prompt settings based on the original email id
     * @param teamId The team id (required)
     * @param jerichoId ID of the Jericho job (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateJerichoPromptSendWithHttpInfo(String teamId, String jerichoId) throws ApiException {
        com.squareup.okhttp.Call call = updateJerichoPromptSendCall(teamId, jerichoId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates the Jericho Prompt Settings (asynchronously)
     * Updates the prompt settings based on the original email id
     * @param teamId The team id (required)
     * @param jerichoId ID of the Jericho job (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateJerichoPromptSendAsync(String teamId, String jerichoId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateJerichoPromptSendCall(teamId, jerichoId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateTeam */
    private com.squareup.okhttp.Call updateTeamCall(String teamId, String name, String state, Boolean subteamsCanAddMembers, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling updateTeam(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/{teamId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "teamId" + "\\}", apiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (name != null)
        localVarFormParams.put("name", name);
        if (state != null)
        localVarFormParams.put("state", state);
        if (subteamsCanAddMembers != null)
        localVarFormParams.put("subteamsCanAddMembers", subteamsCanAddMembers);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update a team
     * Update fields on a team
     * @param teamId The team id (required)
     * @param name The name of the team (optional)
     * @param state The status of the login permissions (optional)
     * @param subteamsCanAddMembers Updates subteam member adding setting on group (optional)
     * @return TeamPublicRepresentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TeamPublicRepresentation updateTeam(String teamId, String name, String state, Boolean subteamsCanAddMembers) throws ApiException {
        ApiResponse<TeamPublicRepresentation> resp = updateTeamWithHttpInfo(teamId, name, state, subteamsCanAddMembers);
        return resp.getData();
    }

    /**
     * Update a team
     * Update fields on a team
     * @param teamId The team id (required)
     * @param name The name of the team (optional)
     * @param state The status of the login permissions (optional)
     * @param subteamsCanAddMembers Updates subteam member adding setting on group (optional)
     * @return ApiResponse&lt;TeamPublicRepresentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TeamPublicRepresentation> updateTeamWithHttpInfo(String teamId, String name, String state, Boolean subteamsCanAddMembers) throws ApiException {
        com.squareup.okhttp.Call call = updateTeamCall(teamId, name, state, subteamsCanAddMembers, null, null);
        Type localVarReturnType = new TypeToken<TeamPublicRepresentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a team (asynchronously)
     * Update fields on a team
     * @param teamId The team id (required)
     * @param name The name of the team (optional)
     * @param state The status of the login permissions (optional)
     * @param subteamsCanAddMembers Updates subteam member adding setting on group (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTeamAsync(String teamId, String name, String state, Boolean subteamsCanAddMembers, final ApiCallback<TeamPublicRepresentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTeamCall(teamId, name, state, subteamsCanAddMembers, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TeamPublicRepresentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateTeamMember */
    private com.squareup.okhttp.Call updateTeamMemberCall(String teamId, String userId, Boolean admin, String permissionSuiteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling updateTeamMember(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateTeamMember(Async)");
        }
        
        // verify the required parameter 'admin' is set
        if (admin == null) {
            throw new ApiException("Missing the required parameter 'admin' when calling updateTeamMember(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/team/{teamId}/member".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "teamId" + "\\}", apiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (userId != null)
        localVarFormParams.put("userId", userId);
        if (admin != null)
        localVarFormParams.put("admin", admin);
        if (permissionSuiteId != null)
        localVarFormParams.put("permissionSuiteId", permissionSuiteId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update Member of Team
     * Updates a member of a team
     * @param teamId The team id (required)
     * @param userId The user id of the member being added to the team. (required)
     * @param admin Set if the user is an admin of this team. (required)
     * @param permissionSuiteId Set if the user is an admin of this team. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateTeamMember(String teamId, String userId, Boolean admin, String permissionSuiteId) throws ApiException {
        updateTeamMemberWithHttpInfo(teamId, userId, admin, permissionSuiteId);
    }

    /**
     * Update Member of Team
     * Updates a member of a team
     * @param teamId The team id (required)
     * @param userId The user id of the member being added to the team. (required)
     * @param admin Set if the user is an admin of this team. (required)
     * @param permissionSuiteId Set if the user is an admin of this team. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateTeamMemberWithHttpInfo(String teamId, String userId, Boolean admin, String permissionSuiteId) throws ApiException {
        com.squareup.okhttp.Call call = updateTeamMemberCall(teamId, userId, admin, permissionSuiteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update Member of Team (asynchronously)
     * Updates a member of a team
     * @param teamId The team id (required)
     * @param userId The user id of the member being added to the team. (required)
     * @param admin Set if the user is an admin of this team. (required)
     * @param permissionSuiteId Set if the user is an admin of this team. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTeamMemberAsync(String teamId, String userId, Boolean admin, String permissionSuiteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTeamMemberCall(teamId, userId, admin, permissionSuiteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
