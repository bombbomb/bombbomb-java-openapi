/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.24005
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SocialsApi {
    private ApiClient apiClient;

    public SocialsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SocialsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getSocialArticleProperties */
    private com.squareup.okhttp.Call getSocialArticlePropertiesCall(String jerichoId, String emailId, String originatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'jerichoId' is set
        if (jerichoId == null) {
            throw new ApiException("Missing the required parameter 'jerichoId' when calling getSocialArticleProperties(Async)");
        }
        
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getSocialArticleProperties(Async)");
        }
        
        // verify the required parameter 'originatorId' is set
        if (originatorId == null) {
            throw new ApiException("Missing the required parameter 'originatorId' when calling getSocialArticleProperties(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/socials/properties".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (jerichoId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jerichoId", jerichoId));
        if (emailId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "emailId", emailId));
        if (originatorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "originatorId", originatorId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets the social email properties
     * Gets the social email properties
     * @param jerichoId associated jericho Id (required)
     * @param emailId This is the email Id for the email url (required)
     * @param originatorId This is the originator Id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getSocialArticleProperties(String jerichoId, String emailId, String originatorId) throws ApiException {
        getSocialArticlePropertiesWithHttpInfo(jerichoId, emailId, originatorId);
    }

    /**
     * Gets the social email properties
     * Gets the social email properties
     * @param jerichoId associated jericho Id (required)
     * @param emailId This is the email Id for the email url (required)
     * @param originatorId This is the originator Id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getSocialArticlePropertiesWithHttpInfo(String jerichoId, String emailId, String originatorId) throws ApiException {
        com.squareup.okhttp.Call call = getSocialArticlePropertiesCall(jerichoId, emailId, originatorId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Gets the social email properties (asynchronously)
     * Gets the social email properties
     * @param jerichoId associated jericho Id (required)
     * @param emailId This is the email Id for the email url (required)
     * @param originatorId This is the originator Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSocialArticlePropertiesAsync(String jerichoId, String emailId, String originatorId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSocialArticlePropertiesCall(jerichoId, emailId, originatorId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getSocialAutoShares */
    private com.squareup.okhttp.Call getSocialAutoSharesCall(String clientGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'clientGroupId' is set
        if (clientGroupId == null) {
            throw new ApiException("Missing the required parameter 'clientGroupId' when calling getSocialAutoShares(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/socials/shares".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (clientGroupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "clientGroupId", clientGroupId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets the auto shares from the client group assoc id
     * Gets the auto shares from the client group assoc id
     * @param clientGroupId ID of the client group association (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getSocialAutoShares(String clientGroupId) throws ApiException {
        getSocialAutoSharesWithHttpInfo(clientGroupId);
    }

    /**
     * Gets the auto shares from the client group assoc id
     * Gets the auto shares from the client group assoc id
     * @param clientGroupId ID of the client group association (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getSocialAutoSharesWithHttpInfo(String clientGroupId) throws ApiException {
        com.squareup.okhttp.Call call = getSocialAutoSharesCall(clientGroupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Gets the auto shares from the client group assoc id (asynchronously)
     * Gets the auto shares from the client group assoc id
     * @param clientGroupId ID of the client group association (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSocialAutoSharesAsync(String clientGroupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSocialAutoSharesCall(clientGroupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getSocialPermissions */
    private com.squareup.okhttp.Call getSocialPermissionsCall(String socialType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'socialType' is set
        if (socialType == null) {
            throw new ApiException("Missing the required parameter 'socialType' when calling getSocialPermissions(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/socials/permissions".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (socialType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "socialType", socialType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get permissions for social integration
     * Get permissions for social integration and has redirect for user to login
     * @param socialType Type of social integration (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getSocialPermissions(String socialType) throws ApiException {
        getSocialPermissionsWithHttpInfo(socialType);
    }

    /**
     * Get permissions for social integration
     * Get permissions for social integration and has redirect for user to login
     * @param socialType Type of social integration (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getSocialPermissionsWithHttpInfo(String socialType) throws ApiException {
        com.squareup.okhttp.Call call = getSocialPermissionsCall(socialType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get permissions for social integration (asynchronously)
     * Get permissions for social integration and has redirect for user to login
     * @param socialType Type of social integration (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSocialPermissionsAsync(String socialType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSocialPermissionsCall(socialType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getSocialStatus */
    private com.squareup.okhttp.Call getSocialStatusCall(String originatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'originatorId' is set
        if (originatorId == null) {
            throw new ApiException("Missing the required parameter 'originatorId' when calling getSocialStatus(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/socials/states".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (originatorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "originatorId", originatorId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets the social state
     * Gets the social state
     * @param originatorId associated originatorId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getSocialStatus(String originatorId) throws ApiException {
        getSocialStatusWithHttpInfo(originatorId);
    }

    /**
     * Gets the social state
     * Gets the social state
     * @param originatorId associated originatorId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getSocialStatusWithHttpInfo(String originatorId) throws ApiException {
        com.squareup.okhttp.Call call = getSocialStatusCall(originatorId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Gets the social state (asynchronously)
     * Gets the social state
     * @param originatorId associated originatorId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSocialStatusAsync(String originatorId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSocialStatusCall(originatorId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateSocialAutoShares */
    private com.squareup.okhttp.Call updateSocialAutoSharesCall(String autoShare, String clientGroupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'autoShare' is set
        if (autoShare == null) {
            throw new ApiException("Missing the required parameter 'autoShare' when calling updateSocialAutoShares(Async)");
        }
        
        // verify the required parameter 'clientGroupId' is set
        if (clientGroupId == null) {
            throw new ApiException("Missing the required parameter 'clientGroupId' when calling updateSocialAutoShares(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/socials/shares".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (autoShare != null)
        localVarFormParams.put("autoShare", autoShare);
        if (clientGroupId != null)
        localVarFormParams.put("clientGroupId", clientGroupId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets the auto shares from the client group assoc id
     * Gets the auto shares from the client group assoc id
     * @param autoShare The social share that will auto share to (required)
     * @param clientGroupId ID of the client group association (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSocialAutoShares(String autoShare, String clientGroupId) throws ApiException {
        updateSocialAutoSharesWithHttpInfo(autoShare, clientGroupId);
    }

    /**
     * Gets the auto shares from the client group assoc id
     * Gets the auto shares from the client group assoc id
     * @param autoShare The social share that will auto share to (required)
     * @param clientGroupId ID of the client group association (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSocialAutoSharesWithHttpInfo(String autoShare, String clientGroupId) throws ApiException {
        com.squareup.okhttp.Call call = updateSocialAutoSharesCall(autoShare, clientGroupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Gets the auto shares from the client group assoc id (asynchronously)
     * Gets the auto shares from the client group assoc id
     * @param autoShare The social share that will auto share to (required)
     * @param clientGroupId ID of the client group association (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSocialAutoSharesAsync(String autoShare, String clientGroupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSocialAutoSharesCall(autoShare, clientGroupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateSocialMessage */
    private com.squareup.okhttp.Call updateSocialMessageCall(String message, String originatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'message' is set
        if (message == null) {
            throw new ApiException("Missing the required parameter 'message' when calling updateSocialMessage(Async)");
        }
        
        // verify the required parameter 'originatorId' is set
        if (originatorId == null) {
            throw new ApiException("Missing the required parameter 'originatorId' when calling updateSocialMessage(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/socials/message".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (message != null)
        localVarFormParams.put("message", message);
        if (originatorId != null)
        localVarFormParams.put("originatorId", originatorId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Sets the users social message to what they typed in
     * Sets the users social message to what they typed in
     * @param message The social message the user typed in (required)
     * @param originatorId The parent id tied to the social share (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSocialMessage(String message, String originatorId) throws ApiException {
        updateSocialMessageWithHttpInfo(message, originatorId);
    }

    /**
     * Sets the users social message to what they typed in
     * Sets the users social message to what they typed in
     * @param message The social message the user typed in (required)
     * @param originatorId The parent id tied to the social share (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSocialMessageWithHttpInfo(String message, String originatorId) throws ApiException {
        com.squareup.okhttp.Call call = updateSocialMessageCall(message, originatorId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Sets the users social message to what they typed in (asynchronously)
     * Sets the users social message to what they typed in
     * @param message The social message the user typed in (required)
     * @param originatorId The parent id tied to the social share (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSocialMessageAsync(String message, String originatorId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSocialMessageCall(message, originatorId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateSocialStatus */
    private com.squareup.okhttp.Call updateSocialStatusCall(String state, String originatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'state' is set
        if (state == null) {
            throw new ApiException("Missing the required parameter 'state' when calling updateSocialStatus(Async)");
        }
        
        // verify the required parameter 'originatorId' is set
        if (originatorId == null) {
            throw new ApiException("Missing the required parameter 'originatorId' when calling updateSocialStatus(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/socials/state".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (state != null)
        localVarFormParams.put("state", state);
        if (originatorId != null)
        localVarFormParams.put("originatorId", originatorId);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Updates the social state for the object
     * Updates the social state for the object
     * @param state The state to set to (required)
     * @param originatorId The parent id tied to the social share (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateSocialStatus(String state, String originatorId) throws ApiException {
        updateSocialStatusWithHttpInfo(state, originatorId);
    }

    /**
     * Updates the social state for the object
     * Updates the social state for the object
     * @param state The state to set to (required)
     * @param originatorId The parent id tied to the social share (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateSocialStatusWithHttpInfo(String state, String originatorId) throws ApiException {
        com.squareup.okhttp.Call call = updateSocialStatusCall(state, originatorId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates the social state for the object (asynchronously)
     * Updates the social state for the object
     * @param state The state to set to (required)
     * @param originatorId The parent id tied to the social share (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSocialStatusAsync(String state, String originatorId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSocialStatusCall(state, originatorId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
