/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.25797
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmailsApi {
    private ApiClient apiClient;

    public EmailsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EmailsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createPrintingPressEmail */
    private com.squareup.okhttp.Call createPrintingPressEmailCall(String templateId, String content, String emailId, String videoId, String subjectLine, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling createPrintingPressEmail(Async)");
        }
        
        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling createPrintingPressEmail(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/emails/print".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (templateId != null)
        localVarFormParams.put("templateId", templateId);
        if (content != null)
        localVarFormParams.put("content", content);
        if (emailId != null)
        localVarFormParams.put("emailId", emailId);
        if (videoId != null)
        localVarFormParams.put("videoId", videoId);
        if (subjectLine != null)
        localVarFormParams.put("subjectLine", subjectLine);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create an Email with Printing Press
     * Prints an email using the template id and content to the users account.If a video id is included, it will replace any video placeholders with that video.
     * @param templateId The template id to be printed. (required)
     * @param content The content of the email. (required)
     * @param emailId The email id to be printed to. (optional)
     * @param videoId A video to replace video place holders with. (optional)
     * @param subjectLine The subject line to be printed. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createPrintingPressEmail(String templateId, String content, String emailId, String videoId, String subjectLine) throws ApiException {
        createPrintingPressEmailWithHttpInfo(templateId, content, emailId, videoId, subjectLine);
    }

    /**
     * Create an Email with Printing Press
     * Prints an email using the template id and content to the users account.If a video id is included, it will replace any video placeholders with that video.
     * @param templateId The template id to be printed. (required)
     * @param content The content of the email. (required)
     * @param emailId The email id to be printed to. (optional)
     * @param videoId A video to replace video place holders with. (optional)
     * @param subjectLine The subject line to be printed. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createPrintingPressEmailWithHttpInfo(String templateId, String content, String emailId, String videoId, String subjectLine) throws ApiException {
        com.squareup.okhttp.Call call = createPrintingPressEmailCall(templateId, content, emailId, videoId, subjectLine, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create an Email with Printing Press (asynchronously)
     * Prints an email using the template id and content to the users account.If a video id is included, it will replace any video placeholders with that video.
     * @param templateId The template id to be printed. (required)
     * @param content The content of the email. (required)
     * @param emailId The email id to be printed to. (optional)
     * @param videoId A video to replace video place holders with. (optional)
     * @param subjectLine The subject line to be printed. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPrintingPressEmailAsync(String templateId, String content, String emailId, String videoId, String subjectLine, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPrintingPressEmailCall(templateId, content, emailId, videoId, subjectLine, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getAllTemplatesForCurrentUser */
    private com.squareup.okhttp.Call getAllTemplatesForCurrentUserCall(Boolean quickSendOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/emails/templates".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (quickSendOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "quickSendOnly", quickSendOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get all user templates
     * Get all templates accessible to the current user
     * @param quickSendOnly Whether to return only quick send templates. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getAllTemplatesForCurrentUser(Boolean quickSendOnly) throws ApiException {
        getAllTemplatesForCurrentUserWithHttpInfo(quickSendOnly);
    }

    /**
     * Get all user templates
     * Get all templates accessible to the current user
     * @param quickSendOnly Whether to return only quick send templates. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getAllTemplatesForCurrentUserWithHttpInfo(Boolean quickSendOnly) throws ApiException {
        com.squareup.okhttp.Call call = getAllTemplatesForCurrentUserCall(quickSendOnly, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get all user templates (asynchronously)
     * Get all templates accessible to the current user
     * @param quickSendOnly Whether to return only quick send templates. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllTemplatesForCurrentUserAsync(Boolean quickSendOnly, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllTemplatesForCurrentUserCall(quickSendOnly, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getEmailTracking */
    private com.squareup.okhttp.Call getEmailTrackingCall(String emailId, String jobId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getEmailTracking(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/emails/{emailId}/tracking".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "emailId" + "\\}", apiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (jobId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jobId", jobId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get Email Tracking
     * Get Tracking data for all sends of an Email
     * @param emailId ID of the email (required)
     * @param jobId ID of the Job (or null for all jobs) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getEmailTracking(String emailId, String jobId) throws ApiException {
        getEmailTrackingWithHttpInfo(emailId, jobId);
    }

    /**
     * Get Email Tracking
     * Get Tracking data for all sends of an Email
     * @param emailId ID of the email (required)
     * @param jobId ID of the Job (or null for all jobs) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getEmailTrackingWithHttpInfo(String emailId, String jobId) throws ApiException {
        com.squareup.okhttp.Call call = getEmailTrackingCall(emailId, jobId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get Email Tracking (asynchronously)
     * Get Tracking data for all sends of an Email
     * @param emailId ID of the email (required)
     * @param jobId ID of the Job (or null for all jobs) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailTrackingAsync(String emailId, String jobId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailTrackingCall(emailId, jobId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getEmailTrackingInteractions */
    private com.squareup.okhttp.Call getEmailTrackingInteractionsCall(String emailId, String jobId, String interactionType, String searchTerm, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getEmailTrackingInteractions(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/emails/{emailId}/tracking/interactions".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "emailId" + "\\}", apiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (jobId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jobId", jobId));
        if (interactionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionType", interactionType));
        if (searchTerm != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "searchTerm", searchTerm));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get Email Tracking Interactions
     * Get Contact detail interactions for an Email
     * @param emailId ID of the email (required)
     * @param jobId ID of the Job (or null for all jobs) (optional)
     * @param interactionType Interaction type to order and filter by (optional)
     * @param searchTerm Search term to filer by (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getEmailTrackingInteractions(String emailId, String jobId, String interactionType, String searchTerm) throws ApiException {
        getEmailTrackingInteractionsWithHttpInfo(emailId, jobId, interactionType, searchTerm);
    }

    /**
     * Get Email Tracking Interactions
     * Get Contact detail interactions for an Email
     * @param emailId ID of the email (required)
     * @param jobId ID of the Job (or null for all jobs) (optional)
     * @param interactionType Interaction type to order and filter by (optional)
     * @param searchTerm Search term to filer by (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getEmailTrackingInteractionsWithHttpInfo(String emailId, String jobId, String interactionType, String searchTerm) throws ApiException {
        com.squareup.okhttp.Call call = getEmailTrackingInteractionsCall(emailId, jobId, interactionType, searchTerm, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get Email Tracking Interactions (asynchronously)
     * Get Contact detail interactions for an Email
     * @param emailId ID of the email (required)
     * @param jobId ID of the Job (or null for all jobs) (optional)
     * @param interactionType Interaction type to order and filter by (optional)
     * @param searchTerm Search term to filer by (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEmailTrackingInteractionsAsync(String emailId, String jobId, String interactionType, String searchTerm, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEmailTrackingInteractionsCall(emailId, jobId, interactionType, searchTerm, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getHourlyEmailTracking */
    private com.squareup.okhttp.Call getHourlyEmailTrackingCall(String emailId, String jobId, String interactionType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getHourlyEmailTracking(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/emails/{emailId}/tracking/hourly".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "emailId" + "\\}", apiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (jobId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "jobId", jobId));
        if (interactionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "interactionType", interactionType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get Hourly Email Tracking
     * Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
     * @param emailId ID of the email (required)
     * @param jobId ID of the Job (or null for all jobs) (optional)
     * @param interactionType Interaction type to filter by (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getHourlyEmailTracking(String emailId, String jobId, String interactionType) throws ApiException {
        getHourlyEmailTrackingWithHttpInfo(emailId, jobId, interactionType);
    }

    /**
     * Get Hourly Email Tracking
     * Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
     * @param emailId ID of the email (required)
     * @param jobId ID of the Job (or null for all jobs) (optional)
     * @param interactionType Interaction type to filter by (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getHourlyEmailTrackingWithHttpInfo(String emailId, String jobId, String interactionType) throws ApiException {
        com.squareup.okhttp.Call call = getHourlyEmailTrackingCall(emailId, jobId, interactionType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get Hourly Email Tracking (asynchronously)
     * Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
     * @param emailId ID of the email (required)
     * @param jobId ID of the Job (or null for all jobs) (optional)
     * @param interactionType Interaction type to filter by (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHourlyEmailTrackingAsync(String emailId, String jobId, String interactionType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHourlyEmailTrackingCall(emailId, jobId, interactionType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getQuickSendTemplates */
    private com.squareup.okhttp.Call getQuickSendTemplatesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/emails/quicksend/templates".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get all quicksend templates
     * Get all quicksend templates accessible to the user.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getQuickSendTemplates() throws ApiException {
        getQuickSendTemplatesWithHttpInfo();
    }

    /**
     * Get all quicksend templates
     * Get all quicksend templates accessible to the user.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getQuickSendTemplatesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getQuickSendTemplatesCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Get all quicksend templates (asynchronously)
     * Get all quicksend templates accessible to the user.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuickSendTemplatesAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuickSendTemplatesCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for videoQuickSender */
    private com.squareup.okhttp.Call videoQuickSenderCall(String videoId, String emailAddresses, String subject, String message, String listIds, Integer scheduledSendTimestamp, String extendedProperties, String templateId, String stripHTML, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/emails/quicksend".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (videoId != null)
        localVarFormParams.put("videoId", videoId);
        if (emailAddresses != null)
        localVarFormParams.put("emailAddresses", emailAddresses);
        if (subject != null)
        localVarFormParams.put("subject", subject);
        if (message != null)
        localVarFormParams.put("message", message);
        if (listIds != null)
        localVarFormParams.put("listIds", listIds);
        if (scheduledSendTimestamp != null)
        localVarFormParams.put("scheduledSendTimestamp", scheduledSendTimestamp);
        if (extendedProperties != null)
        localVarFormParams.put("extendedProperties", extendedProperties);
        if (templateId != null)
        localVarFormParams.put("templateId", templateId);
        if (stripHTML != null)
        localVarFormParams.put("stripHTML", stripHTML);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "BBOAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Send a quicksend email
     * Send a quicksend video email to the list or users provided.
     * @param videoId A guid id for the video. (optional)
     * @param emailAddresses A semi-colon separated list of email addresses to send to. (optional)
     * @param subject Subject line for the email. (optional)
     * @param message Message for the body of the email. (optional)
     * @param listIds An array of list ids (optional)
     * @param scheduledSendTimestamp When to schedule the send (seconds since epoch). null value means send immediately. (optional)
     * @param extendedProperties Bool value that when checked will send back both emailId as well as extra properties (optional)
     * @param templateId Id of a template to use for this send. A null value means use the default for this user. (optional)
     * @param stripHTML remove HTML elements (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void videoQuickSender(String videoId, String emailAddresses, String subject, String message, String listIds, Integer scheduledSendTimestamp, String extendedProperties, String templateId, String stripHTML) throws ApiException {
        videoQuickSenderWithHttpInfo(videoId, emailAddresses, subject, message, listIds, scheduledSendTimestamp, extendedProperties, templateId, stripHTML);
    }

    /**
     * Send a quicksend email
     * Send a quicksend video email to the list or users provided.
     * @param videoId A guid id for the video. (optional)
     * @param emailAddresses A semi-colon separated list of email addresses to send to. (optional)
     * @param subject Subject line for the email. (optional)
     * @param message Message for the body of the email. (optional)
     * @param listIds An array of list ids (optional)
     * @param scheduledSendTimestamp When to schedule the send (seconds since epoch). null value means send immediately. (optional)
     * @param extendedProperties Bool value that when checked will send back both emailId as well as extra properties (optional)
     * @param templateId Id of a template to use for this send. A null value means use the default for this user. (optional)
     * @param stripHTML remove HTML elements (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> videoQuickSenderWithHttpInfo(String videoId, String emailAddresses, String subject, String message, String listIds, Integer scheduledSendTimestamp, String extendedProperties, String templateId, String stripHTML) throws ApiException {
        com.squareup.okhttp.Call call = videoQuickSenderCall(videoId, emailAddresses, subject, message, listIds, scheduledSendTimestamp, extendedProperties, templateId, stripHTML, null, null);
        return apiClient.execute(call);
    }

    /**
     * Send a quicksend email (asynchronously)
     * Send a quicksend video email to the list or users provided.
     * @param videoId A guid id for the video. (optional)
     * @param emailAddresses A semi-colon separated list of email addresses to send to. (optional)
     * @param subject Subject line for the email. (optional)
     * @param message Message for the body of the email. (optional)
     * @param listIds An array of list ids (optional)
     * @param scheduledSendTimestamp When to schedule the send (seconds since epoch). null value means send immediately. (optional)
     * @param extendedProperties Bool value that when checked will send back both emailId as well as extra properties (optional)
     * @param templateId Id of a template to use for this send. A null value means use the default for this user. (optional)
     * @param stripHTML remove HTML elements (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call videoQuickSenderAsync(String videoId, String emailAddresses, String subject, String message, String listIds, Integer scheduledSendTimestamp, String extendedProperties, String templateId, String stripHTML, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = videoQuickSenderCall(videoId, emailAddresses, subject, message, listIds, scheduledSendTimestamp, extendedProperties, templateId, stripHTML, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
