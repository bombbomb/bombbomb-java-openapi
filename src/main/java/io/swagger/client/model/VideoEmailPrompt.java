/*
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.831
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * Configures a single prompt which asks a user to record a video into an outgoing email.
 */
@ApiModel(description = "Configures a single prompt which asks a user to record a video into an outgoing email.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-30T19:45:38.826Z")
public class VideoEmailPrompt {
  @SerializedName("templateId")
  private String templateId = null;

  @SerializedName("emailSubjectLine")
  private String emailSubjectLine = null;

  @SerializedName("emailContent")
  private String emailContent = null;

  @SerializedName("contactId")
  private String contactId = null;

  @SerializedName("toLists")
  private List<String> toLists = null;

  @SerializedName("promptIntro")
  private String promptIntro = null;

  @SerializedName("exampleVideoId")
  private String exampleVideoId = null;

  @SerializedName("followupVideoId")
  private String followupVideoId = null;

  @SerializedName("sendWithoutVideo")
  private Boolean sendWithoutVideo = null;

  @SerializedName("videoDueDate")
  private OffsetDateTime videoDueDate = null;

  @SerializedName("videoId")
  private String videoId = null;

  @SerializedName("emailId")
  private String emailId = null;

  @SerializedName("jobId")
  private String jobId = null;

  @SerializedName("promptBotId")
  private String promptBotId = null;

  @SerializedName("applyTemplate")
  private Boolean applyTemplate = null;

  @SerializedName("facebookMessage")
  private String facebookMessage = null;

  @SerializedName("twitterMessage")
  private String twitterMessage = null;

  @SerializedName("linkedinMessage")
  private String linkedinMessage = null;

  @SerializedName("alternateContentId")
  private String alternateContentId = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("userId")
  private String userId = null;

  @SerializedName("jerichoId")
  private String jerichoId = null;

  @SerializedName("promptSubject")
  private String promptSubject = null;

  @SerializedName("promptHtml")
  private String promptHtml = null;

  @SerializedName("scheduledSendDate")
  private OffsetDateTime scheduledSendDate = null;

  @SerializedName("clientGroupId")
  private String clientGroupId = null;

  @SerializedName("thumbnailUrl")
  private String thumbnailUrl = null;

  @SerializedName("status")
  private Integer status = null;

  @SerializedName("createdDate")
  private OffsetDateTime createdDate = null;

  @SerializedName("lastNotified")
  private OffsetDateTime lastNotified = null;

  @SerializedName("sendMechanism")
  private OffsetDateTime sendMechanism = null;

  @SerializedName("sendTypes")
  private List<String> sendTypes = null;

  public VideoEmailPrompt templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

   /**
   * Optional. The email template to be used in the sent email, if none supplied, the users&#39; default will be applied.
   * @return templateId
  **/
  @ApiModelProperty(value = "Optional. The email template to be used in the sent email, if none supplied, the users' default will be applied.")
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }

  public VideoEmailPrompt emailSubjectLine(String emailSubjectLine) {
    this.emailSubjectLine = emailSubjectLine;
    return this;
  }

   /**
   * The subject line of the final email
   * @return emailSubjectLine
  **/
  @ApiModelProperty(value = "The subject line of the final email")
  public String getEmailSubjectLine() {
    return emailSubjectLine;
  }

  public void setEmailSubjectLine(String emailSubjectLine) {
    this.emailSubjectLine = emailSubjectLine;
  }

  public VideoEmailPrompt emailContent(String emailContent) {
    this.emailContent = emailContent;
    return this;
  }

   /**
   * The HTML content of the final email
   * @return emailContent
  **/
  @ApiModelProperty(value = "The HTML content of the final email")
  public String getEmailContent() {
    return emailContent;
  }

  public void setEmailContent(String emailContent) {
    this.emailContent = emailContent;
  }

  public VideoEmailPrompt contactId(String contactId) {
    this.contactId = contactId;
    return this;
  }

   /**
   * Contact Id to send the final email to
   * @return contactId
  **/
  @ApiModelProperty(value = "Contact Id to send the final email to")
  public String getContactId() {
    return contactId;
  }

  public void setContactId(String contactId) {
    this.contactId = contactId;
  }

  public VideoEmailPrompt toLists(List<String> toLists) {
    this.toLists = toLists;
    return this;
  }

  public VideoEmailPrompt addToListsItem(String toListsItem) {
    if (this.toLists == null) {
      this.toLists = new ArrayList<String>();
    }
    this.toLists.add(toListsItem);
    return this;
  }

   /**
   * List Ids to send the final email to
   * @return toLists
  **/
  @ApiModelProperty(value = "List Ids to send the final email to")
  public List<String> getToLists() {
    return toLists;
  }

  public void setToLists(List<String> toLists) {
    this.toLists = toLists;
  }

  public VideoEmailPrompt promptIntro(String promptIntro) {
    this.promptIntro = promptIntro;
    return this;
  }

   /**
   * A paragraph intro statement about the purpose of the email you&#39;re recording a video for.
   * @return promptIntro
  **/
  @ApiModelProperty(value = "A paragraph intro statement about the purpose of the email you're recording a video for.")
  public String getPromptIntro() {
    return promptIntro;
  }

  public void setPromptIntro(String promptIntro) {
    this.promptIntro = promptIntro;
  }

  public VideoEmailPrompt exampleVideoId(String exampleVideoId) {
    this.exampleVideoId = exampleVideoId;
    return this;
  }

   /**
   * An example or explanatory video to help the user understand what to say.
   * @return exampleVideoId
  **/
  @ApiModelProperty(value = "An example or explanatory video to help the user understand what to say.")
  public String getExampleVideoId() {
    return exampleVideoId;
  }

  public void setExampleVideoId(String exampleVideoId) {
    this.exampleVideoId = exampleVideoId;
  }

  public VideoEmailPrompt followupVideoId(String followupVideoId) {
    this.followupVideoId = followupVideoId;
    return this;
  }

   /**
   * An example or explanatory video to help the user understand what to say.
   * @return followupVideoId
  **/
  @ApiModelProperty(value = "An example or explanatory video to help the user understand what to say.")
  public String getFollowupVideoId() {
    return followupVideoId;
  }

  public void setFollowupVideoId(String followupVideoId) {
    this.followupVideoId = followupVideoId;
  }

  public VideoEmailPrompt sendWithoutVideo(Boolean sendWithoutVideo) {
    this.sendWithoutVideo = sendWithoutVideo;
    return this;
  }

   /**
   * Whether to send the email if no video is recorded. If set to require a video, and none is added before the videoDueDate, the prompt is cancelled.
   * @return sendWithoutVideo
  **/
  @ApiModelProperty(value = "Whether to send the email if no video is recorded. If set to require a video, and none is added before the videoDueDate, the prompt is cancelled.")
  public Boolean isSendWithoutVideo() {
    return sendWithoutVideo;
  }

  public void setSendWithoutVideo(Boolean sendWithoutVideo) {
    this.sendWithoutVideo = sendWithoutVideo;
  }

  public VideoEmailPrompt videoDueDate(OffsetDateTime videoDueDate) {
    this.videoDueDate = videoDueDate;
    return this;
  }

   /**
   * When the video must be recorded by
   * @return videoDueDate
  **/
  @ApiModelProperty(value = "When the video must be recorded by")
  public OffsetDateTime getVideoDueDate() {
    return videoDueDate;
  }

  public void setVideoDueDate(OffsetDateTime videoDueDate) {
    this.videoDueDate = videoDueDate;
  }

   /**
   * The video that was added to the prompt. Read Only.
   * @return videoId
  **/
  @ApiModelProperty(value = "The video that was added to the prompt. Read Only.")
  public String getVideoId() {
    return videoId;
  }

   /**
   * The email that was created by the prompt Read Only.
   * @return emailId
  **/
  @ApiModelProperty(value = "The email that was created by the prompt Read Only.")
  public String getEmailId() {
    return emailId;
  }

   /**
   * The job sent by the prompt Read Only.
   * @return jobId
  **/
  @ApiModelProperty(value = "The job sent by the prompt Read Only.")
  public String getJobId() {
    return jobId;
  }

  public VideoEmailPrompt promptBotId(String promptBotId) {
    this.promptBotId = promptBotId;
    return this;
  }

   /**
   * The bot that created the prompt.
   * @return promptBotId
  **/
  @ApiModelProperty(value = "The bot that created the prompt.")
  public String getPromptBotId() {
    return promptBotId;
  }

  public void setPromptBotId(String promptBotId) {
    this.promptBotId = promptBotId;
  }

  public VideoEmailPrompt applyTemplate(Boolean applyTemplate) {
    this.applyTemplate = applyTemplate;
    return this;
  }

   /**
   * Controls whether a user template is applied to the message as it is sent
   * @return applyTemplate
  **/
  @ApiModelProperty(value = "Controls whether a user template is applied to the message as it is sent")
  public Boolean isApplyTemplate() {
    return applyTemplate;
  }

  public void setApplyTemplate(Boolean applyTemplate) {
    this.applyTemplate = applyTemplate;
  }

  public VideoEmailPrompt facebookMessage(String facebookMessage) {
    this.facebookMessage = facebookMessage;
    return this;
  }

   /**
   * The facebook message to be passed off to social sender
   * @return facebookMessage
  **/
  @ApiModelProperty(value = "The facebook message to be passed off to social sender")
  public String getFacebookMessage() {
    return facebookMessage;
  }

  public void setFacebookMessage(String facebookMessage) {
    this.facebookMessage = facebookMessage;
  }

  public VideoEmailPrompt twitterMessage(String twitterMessage) {
    this.twitterMessage = twitterMessage;
    return this;
  }

   /**
   * The twitter message to be passed off to social sender
   * @return twitterMessage
  **/
  @ApiModelProperty(value = "The twitter message to be passed off to social sender")
  public String getTwitterMessage() {
    return twitterMessage;
  }

  public void setTwitterMessage(String twitterMessage) {
    this.twitterMessage = twitterMessage;
  }

  public VideoEmailPrompt linkedinMessage(String linkedinMessage) {
    this.linkedinMessage = linkedinMessage;
    return this;
  }

   /**
   * The linkedin message to be passed off to social sender
   * @return linkedinMessage
  **/
  @ApiModelProperty(value = "The linkedin message to be passed off to social sender")
  public String getLinkedinMessage() {
    return linkedinMessage;
  }

  public void setLinkedinMessage(String linkedinMessage) {
    this.linkedinMessage = linkedinMessage;
  }

  public VideoEmailPrompt alternateContentId(String alternateContentId) {
    this.alternateContentId = alternateContentId;
    return this;
  }

   /**
   * The id for the alternate content id
   * @return alternateContentId
  **/
  @ApiModelProperty(value = "The id for the alternate content id")
  public String getAlternateContentId() {
    return alternateContentId;
  }

  public void setAlternateContentId(String alternateContentId) {
    this.alternateContentId = alternateContentId;
  }

   /**
   * The identifier of the prompt. Read Only.
   * @return id
  **/
  @ApiModelProperty(value = "The identifier of the prompt. Read Only.")
  public String getId() {
    return id;
  }

   /**
   * The prompt&#39;s owner. Read Only.
   * @return userId
  **/
  @ApiModelProperty(value = "The prompt's owner. Read Only.")
  public String getUserId() {
    return userId;
  }

  public VideoEmailPrompt jerichoId(String jerichoId) {
    this.jerichoId = jerichoId;
    return this;
  }

   /**
   * If sent in a jericho context, this will have the jericho id
   * @return jerichoId
  **/
  @ApiModelProperty(value = "If sent in a jericho context, this will have the jericho id")
  public String getJerichoId() {
    return jerichoId;
  }

  public void setJerichoId(String jerichoId) {
    this.jerichoId = jerichoId;
  }

  public VideoEmailPrompt promptSubject(String promptSubject) {
    this.promptSubject = promptSubject;
    return this;
  }

   /**
   * The prompt&#39;s subject line
   * @return promptSubject
  **/
  @ApiModelProperty(value = "The prompt's subject line")
  public String getPromptSubject() {
    return promptSubject;
  }

  public void setPromptSubject(String promptSubject) {
    this.promptSubject = promptSubject;
  }

  public VideoEmailPrompt promptHtml(String promptHtml) {
    this.promptHtml = promptHtml;
    return this;
  }

   /**
   * The suggested script of the prompt.
   * @return promptHtml
  **/
  @ApiModelProperty(value = "The suggested script of the prompt.")
  public String getPromptHtml() {
    return promptHtml;
  }

  public void setPromptHtml(String promptHtml) {
    this.promptHtml = promptHtml;
  }

  public VideoEmailPrompt scheduledSendDate(OffsetDateTime scheduledSendDate) {
    this.scheduledSendDate = scheduledSendDate;
    return this;
  }

   /**
   * When the final email is scheduled to be sent
   * @return scheduledSendDate
  **/
  @ApiModelProperty(value = "When the final email is scheduled to be sent")
  public OffsetDateTime getScheduledSendDate() {
    return scheduledSendDate;
  }

  public void setScheduledSendDate(OffsetDateTime scheduledSendDate) {
    this.scheduledSendDate = scheduledSendDate;
  }

  public VideoEmailPrompt clientGroupId(String clientGroupId) {
    this.clientGroupId = clientGroupId;
    return this;
  }

   /**
   * The client group campaign that created the prompt.
   * @return clientGroupId
  **/
  @ApiModelProperty(value = "The client group campaign that created the prompt.")
  public String getClientGroupId() {
    return clientGroupId;
  }

  public void setClientGroupId(String clientGroupId) {
    this.clientGroupId = clientGroupId;
  }

  public VideoEmailPrompt thumbnailUrl(String thumbnailUrl) {
    this.thumbnailUrl = thumbnailUrl;
    return this;
  }

   /**
   * The URL of a thumbnail image for this prompt
   * @return thumbnailUrl
  **/
  @ApiModelProperty(value = "The URL of a thumbnail image for this prompt")
  public String getThumbnailUrl() {
    return thumbnailUrl;
  }

  public void setThumbnailUrl(String thumbnailUrl) {
    this.thumbnailUrl = thumbnailUrl;
  }

   /**
   * The status of the prompt: created &#x3D; 0, sent &#x3D; 10, recorded &#x3D; 20, job_created &#x3D; 30, timed_out &#x3D; 40, declined &#x3D; 50 Read Only
   * @return status
  **/
  @ApiModelProperty(value = "The status of the prompt: created = 0, sent = 10, recorded = 20, job_created = 30, timed_out = 40, declined = 50 Read Only")
  public Integer getStatus() {
    return status;
  }

  public VideoEmailPrompt createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

   /**
   * When the email was first sent out
   * @return createdDate
  **/
  @ApiModelProperty(value = "When the email was first sent out")
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }

  public VideoEmailPrompt lastNotified(OffsetDateTime lastNotified) {
    this.lastNotified = lastNotified;
    return this;
  }

   /**
   * When the user was last notified about a prompt email waiting for a video
   * @return lastNotified
  **/
  @ApiModelProperty(value = "When the user was last notified about a prompt email waiting for a video")
  public OffsetDateTime getLastNotified() {
    return lastNotified;
  }

  public void setLastNotified(OffsetDateTime lastNotified) {
    this.lastNotified = lastNotified;
  }

  public VideoEmailPrompt sendMechanism(OffsetDateTime sendMechanism) {
    this.sendMechanism = sendMechanism;
    return this;
  }

   /**
   * The sendMechanism property
   * @return sendMechanism
  **/
  @ApiModelProperty(value = "The sendMechanism property")
  public OffsetDateTime getSendMechanism() {
    return sendMechanism;
  }

  public void setSendMechanism(OffsetDateTime sendMechanism) {
    this.sendMechanism = sendMechanism;
  }

  public VideoEmailPrompt sendTypes(List<String> sendTypes) {
    this.sendTypes = sendTypes;
    return this;
  }

  public VideoEmailPrompt addSendTypesItem(String sendTypesItem) {
    if (this.sendTypes == null) {
      this.sendTypes = new ArrayList<String>();
    }
    this.sendTypes.add(sendTypesItem);
    return this;
  }

   /**
   * The types of mechanisms this prompt can send.
   * @return sendTypes
  **/
  @ApiModelProperty(value = "The types of mechanisms this prompt can send.")
  public List<String> getSendTypes() {
    return sendTypes;
  }

  public void setSendTypes(List<String> sendTypes) {
    this.sendTypes = sendTypes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoEmailPrompt videoEmailPrompt = (VideoEmailPrompt) o;
    return Objects.equals(this.templateId, videoEmailPrompt.templateId) &&
        Objects.equals(this.emailSubjectLine, videoEmailPrompt.emailSubjectLine) &&
        Objects.equals(this.emailContent, videoEmailPrompt.emailContent) &&
        Objects.equals(this.contactId, videoEmailPrompt.contactId) &&
        Objects.equals(this.toLists, videoEmailPrompt.toLists) &&
        Objects.equals(this.promptIntro, videoEmailPrompt.promptIntro) &&
        Objects.equals(this.exampleVideoId, videoEmailPrompt.exampleVideoId) &&
        Objects.equals(this.followupVideoId, videoEmailPrompt.followupVideoId) &&
        Objects.equals(this.sendWithoutVideo, videoEmailPrompt.sendWithoutVideo) &&
        Objects.equals(this.videoDueDate, videoEmailPrompt.videoDueDate) &&
        Objects.equals(this.videoId, videoEmailPrompt.videoId) &&
        Objects.equals(this.emailId, videoEmailPrompt.emailId) &&
        Objects.equals(this.jobId, videoEmailPrompt.jobId) &&
        Objects.equals(this.promptBotId, videoEmailPrompt.promptBotId) &&
        Objects.equals(this.applyTemplate, videoEmailPrompt.applyTemplate) &&
        Objects.equals(this.facebookMessage, videoEmailPrompt.facebookMessage) &&
        Objects.equals(this.twitterMessage, videoEmailPrompt.twitterMessage) &&
        Objects.equals(this.linkedinMessage, videoEmailPrompt.linkedinMessage) &&
        Objects.equals(this.alternateContentId, videoEmailPrompt.alternateContentId) &&
        Objects.equals(this.id, videoEmailPrompt.id) &&
        Objects.equals(this.userId, videoEmailPrompt.userId) &&
        Objects.equals(this.jerichoId, videoEmailPrompt.jerichoId) &&
        Objects.equals(this.promptSubject, videoEmailPrompt.promptSubject) &&
        Objects.equals(this.promptHtml, videoEmailPrompt.promptHtml) &&
        Objects.equals(this.scheduledSendDate, videoEmailPrompt.scheduledSendDate) &&
        Objects.equals(this.clientGroupId, videoEmailPrompt.clientGroupId) &&
        Objects.equals(this.thumbnailUrl, videoEmailPrompt.thumbnailUrl) &&
        Objects.equals(this.status, videoEmailPrompt.status) &&
        Objects.equals(this.createdDate, videoEmailPrompt.createdDate) &&
        Objects.equals(this.lastNotified, videoEmailPrompt.lastNotified) &&
        Objects.equals(this.sendMechanism, videoEmailPrompt.sendMechanism) &&
        Objects.equals(this.sendTypes, videoEmailPrompt.sendTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(templateId, emailSubjectLine, emailContent, contactId, toLists, promptIntro, exampleVideoId, followupVideoId, sendWithoutVideo, videoDueDate, videoId, emailId, jobId, promptBotId, applyTemplate, facebookMessage, twitterMessage, linkedinMessage, alternateContentId, id, userId, jerichoId, promptSubject, promptHtml, scheduledSendDate, clientGroupId, thumbnailUrl, status, createdDate, lastNotified, sendMechanism, sendTypes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoEmailPrompt {\n");
    
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    emailSubjectLine: ").append(toIndentedString(emailSubjectLine)).append("\n");
    sb.append("    emailContent: ").append(toIndentedString(emailContent)).append("\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    toLists: ").append(toIndentedString(toLists)).append("\n");
    sb.append("    promptIntro: ").append(toIndentedString(promptIntro)).append("\n");
    sb.append("    exampleVideoId: ").append(toIndentedString(exampleVideoId)).append("\n");
    sb.append("    followupVideoId: ").append(toIndentedString(followupVideoId)).append("\n");
    sb.append("    sendWithoutVideo: ").append(toIndentedString(sendWithoutVideo)).append("\n");
    sb.append("    videoDueDate: ").append(toIndentedString(videoDueDate)).append("\n");
    sb.append("    videoId: ").append(toIndentedString(videoId)).append("\n");
    sb.append("    emailId: ").append(toIndentedString(emailId)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    promptBotId: ").append(toIndentedString(promptBotId)).append("\n");
    sb.append("    applyTemplate: ").append(toIndentedString(applyTemplate)).append("\n");
    sb.append("    facebookMessage: ").append(toIndentedString(facebookMessage)).append("\n");
    sb.append("    twitterMessage: ").append(toIndentedString(twitterMessage)).append("\n");
    sb.append("    linkedinMessage: ").append(toIndentedString(linkedinMessage)).append("\n");
    sb.append("    alternateContentId: ").append(toIndentedString(alternateContentId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    jerichoId: ").append(toIndentedString(jerichoId)).append("\n");
    sb.append("    promptSubject: ").append(toIndentedString(promptSubject)).append("\n");
    sb.append("    promptHtml: ").append(toIndentedString(promptHtml)).append("\n");
    sb.append("    scheduledSendDate: ").append(toIndentedString(scheduledSendDate)).append("\n");
    sb.append("    clientGroupId: ").append(toIndentedString(clientGroupId)).append("\n");
    sb.append("    thumbnailUrl: ").append(toIndentedString(thumbnailUrl)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    lastNotified: ").append(toIndentedString(lastNotified)).append("\n");
    sb.append("    sendMechanism: ").append(toIndentedString(sendMechanism)).append("\n");
    sb.append("    sendTypes: ").append(toIndentedString(sendTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

