/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.22196
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.VideoRecorderMethodResponse;
import io.swagger.client.model.VideoPublicRepresentation;
import io.swagger.client.model.SignUploadRequest;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VideosApi
 */
public class VideosApiTest {

    private final VideosApi api = new VideosApi();

    
    /**
     * Get Live Video Recorder HTML
     *
     * Returns an object with a number of properties to help you put a video recorder on your site.         This is to be used in conjunction with the VideoRecordedLive call one the user has confirmed in your UI that         the video is how they want it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVideoRecorderTest() throws ApiException {
        Integer width = null;
        String videoId = null;
        // VideoRecorderMethodResponse response = api.getVideoRecorder(width, videoId);

        // TODO: test validations
    }
    
    /**
     * Completes a live recording
     *
     * Used in conjunction with the live recorder method to mark a video recording as complete.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markLiveRecordingCompleteTest() throws ApiException {
        String videoId = null;
        String filename = null;
        String title = null;
        // VideoPublicRepresentation response = api.markLiveRecordingComplete(videoId, filename, title);

        // TODO: test validations
    }
    
    /**
     * Generate Signed Url
     *
     * Generates a signed url to be used for video uploads.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void signUploadTest() throws ApiException {
        SignUploadRequest policy = null;
        Boolean v4 = null;
        // String response = api.signUpload(policy, v4);

        // TODO: test validations
    }
    
}
