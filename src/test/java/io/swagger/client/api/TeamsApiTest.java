/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.22196
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.TeamPublicRepresentation;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.JerichoConfiguration;
import io.swagger.client.model.JerichoPerformance;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TeamsApi
 */
public class TeamsApiTest {

    private final TeamsApi api = new TeamsApi();

    
    /**
     * Add Member to Team
     *
     * Adds a member to a team.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTeamMemberTest() throws ApiException {
        String teamId = null;
        String userId = null;
        String userEmail = null;
        Boolean admin = null;
        // String response = api.addTeamMember(teamId, userId, userEmail, admin);

        // TODO: test validations
    }
    
    /**
     * Cancel a Jericho Send
     *
     * Cancels a scheduled Jericho send from being sent.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelJerichoSendTest() throws ApiException {
        String jerichoId = null;
        // api.cancelJerichoSend(jerichoId);

        // TODO: test validations
    }
    
    /**
     * Add a Subteam
     *
     * Adds a subteam to a parent team
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSubteamTest() throws ApiException {
        String teamId = null;
        String name = null;
        // TeamPublicRepresentation response = api.createSubteam(teamId, name);

        // TODO: test validations
    }
    
    /**
     * Delete Subteam
     *
     * Deletes a subteam
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSubteamTest() throws ApiException {
        String teamId = null;
        String subteamId = null;
        // String response = api.deleteSubteam(teamId, subteamId);

        // TODO: test validations
    }
    
    /**
     * Lists team assets
     *
     * Returns a collection of assets
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientGroupAssetsTest() throws ApiException {
        String assetType = null;
        String teamId = null;
        String autoTagName = null;
        String pageSize = null;
        String page = null;
        String search = null;
        // InlineResponse200 response = api.getClientGroupAssets(assetType, teamId, autoTagName, pageSize, page, search);

        // TODO: test validations
    }
    
    /**
     * List Jericho Sends
     *
     * Lists Jericho sends, both pending and sent.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJerichoSendsTest() throws ApiException {
        String teamId = null;
        // List<JerichoConfiguration> response = api.getJerichoSends(teamId);

        // TODO: test validations
    }
    
    /**
     * Gets Jericho performance statistics
     *
     * Returns an aggregate view of the performance of a Jericho send
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJerichoStatsTest() throws ApiException {
        String jerichoId = null;
        String teamId = null;
        // JerichoPerformance response = api.getJerichoStats(jerichoId, teamId);

        // TODO: test validations
    }
    
    /**
     * List Subteams
     *
     * Returns a collection of subteams for a parent team
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubteamsTest() throws ApiException {
        String teamId = null;
        // List<TeamPublicRepresentation> response = api.getSubteams(teamId);

        // TODO: test validations
    }
    
    /**
     * Creates a Jericho send.
     *
     * Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queueJerichoSendTest() throws ApiException {
        JerichoConfiguration config = null;
        String teamId = null;
        // JerichoConfiguration response = api.queueJerichoSend(config, teamId);

        // TODO: test validations
    }
    
    /**
     * Remove Member from Team
     *
     * Removes a member from a team.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeMemberFromTeamTest() throws ApiException {
        String teamId = null;
        String userId = null;
        // String response = api.removeMemberFromTeam(teamId, userId);

        // TODO: test validations
    }
    
    /**
     * Update a team
     *
     * Update fields on a team
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTeamTest() throws ApiException {
        String teamId = null;
        String name = null;
        // TeamPublicRepresentation response = api.updateTeam(teamId, name);

        // TODO: test validations
    }
    
}
