/**
 * BombBomb
 * We make it easy to build relationships using simple videos.
 *
 * OpenAPI spec version: 2.0.22196
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.PromptBotBot;
import io.swagger.client.model.VideoEmailPrompt;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PromptsApi
 */
public class PromptsApiTest {

    private final PromptsApi api = new PromptsApi();

    
    /**
     * Create a running Prompt Bot for a list
     *
     * Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPromptBotTest() throws ApiException {
        String listId = null;
        String emailId = null;
        String endDate = null;
        String promptSubject = null;
        String promptBody = null;
        String botTypeId = null;
        String templateId = null;
        // PromptBotBot response = api.createPromptBot(listId, emailId, endDate, promptSubject, promptBody, botTypeId, templateId);

        // TODO: test validations
    }
    
    /**
     * Prompts user to send a video
     *
     * Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVideoEmailPromptTest() throws ApiException {
        VideoEmailPrompt prompt = null;
        // VideoEmailPrompt response = api.createVideoEmailPrompt(prompt);

        // TODO: test validations
    }
    
    /**
     * List pending prompts
     *
     * Returns a list of prompts that have not been sent yet, and can still be customized.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPendingVideoEmailPromptsTest() throws ApiException {
        // List<VideoEmailPrompt> response = api.getPendingVideoEmailPrompts();

        // TODO: test validations
    }
    
    /**
     * List Prompt Bots
     *
     * Returns a list of all Prompt Bots for the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPromptBotsTest() throws ApiException {
        // List<PromptBotBot> response = api.getPromptBots();

        // TODO: test validations
    }
    
    /**
     * List Prompt Campaigns
     *
     * Returns a list of all Prompt Campaigns for the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPromptCampaignsTest() throws ApiException {
        // api.getPromptCampaigns();

        // TODO: test validations
    }
    
    /**
     * Gets a prompt
     *
     * Gets a prompt
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVideoEmailPromptTest() throws ApiException {
        String id = null;
        // VideoEmailPrompt response = api.getVideoEmailPrompt(id);

        // TODO: test validations
    }
    
    /**
     * List prompts
     *
     * Returns a list of all prompts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVideoEmailPromptsTest() throws ApiException {
        // List<VideoEmailPrompt> response = api.getVideoEmailPrompts();

        // TODO: test validations
    }
    
    /**
     * Respond to a prompt
     *
     * Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void respondToVideoEmailPromptTest() throws ApiException {
        String id = null;
        String choice = null;
        String videoId = null;
        String emailId = null;
        // VideoEmailPrompt response = api.respondToVideoEmailPrompt(id, choice, videoId, emailId);

        // TODO: test validations
    }
    
    /**
     * Update Prompt Bot
     *
     * Updates a Prompt Bot&#39;s settings.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePromptBotTest() throws ApiException {
        String id = null;
        String emailId = null;
        String endDate = null;
        String status = null;
        // PromptBotBot response = api.updatePromptBot(id, emailId, endDate, status);

        // TODO: test validations
    }
    
    /**
     * Update Prompt Campaign
     *
     * Updates a Prompt Campaign&#39;s Settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePromptCampaignTest() throws ApiException {
        String clientGroupId = null;
        String brandedTemplateId = null;
        String personalTemplateId = null;
        Boolean enabled = null;
        // api.updatePromptCampaign(clientGroupId, brandedTemplateId, personalTemplateId, enabled);

        // TODO: test validations
    }
    
}
